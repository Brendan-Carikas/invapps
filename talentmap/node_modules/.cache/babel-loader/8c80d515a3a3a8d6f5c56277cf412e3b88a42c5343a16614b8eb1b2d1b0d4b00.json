{"ast":null,"code":"var _jsxFileName = \"/Users/invotradesign/CascadeProjects/site-users-app/src/components/OrgChart.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport { Box, Card, CardContent, Typography, Avatar, styled, useTheme } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Styled components for the org chart\nconst StyledNode = styled(Card)(({\n  theme\n}) => ({\n  display: 'inline-block',\n  borderRadius: theme.spacing(1),\n  minWidth: 240,\n  textAlign: 'center',\n  '&:hover': {\n    boxShadow: theme.shadows[4]\n  }\n}));\n_c = StyledNode;\nconst StyledTreeNode = styled(TreeNode)({\n  padding: '16px',\n  '& .rst__lineHalfHorizontalRight::before, & .rst__lineHalfHorizontalLeft::before, & .rst__lineFullVertical::after': {\n    borderColor: '#D35400'\n  }\n});\n_c2 = StyledTreeNode;\nconst OrgNode = ({\n  user\n}) => {\n  _s();\n  const theme = useTheme();\n  return /*#__PURE__*/_jsxDEV(StyledNode, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          src: user.imageUrl,\n          alt: user.name,\n          sx: {\n            width: 64,\n            height: 64,\n            mb: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"div\",\n          children: user.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"text.secondary\",\n          variant: \"body2\",\n          children: user.jobRole\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"text.secondary\",\n          variant: \"body2\",\n          children: user.team\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n// Helper function to build the org chart tree\n_s(OrgNode, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c3 = OrgNode;\nconst buildOrgTree = (users, rootId) => {\n  const user = users.find(u => u.id === rootId);\n  if (!user) return null;\n  const directReports = users.filter(u => u.managerId === user.id);\n  return /*#__PURE__*/_jsxDEV(StyledTreeNode, {\n    label: /*#__PURE__*/_jsxDEV(OrgNode, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 32\n    }, this),\n    children: directReports.map(report => buildOrgTree(users, report.id))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\nconst OrgChart = () => {\n  // Mock data with hierarchy\n  const mockUsers = [{\n    id: 1,\n    name: 'John Doe',\n    team: 'Executive',\n    location: 'New York',\n    jobRole: 'CEO',\n    imageUrl: '',\n    email: 'john.doe@company.com',\n    phone: '+1 (555) 000-0001',\n    linkedin: 'linkedin.com/in/johndoe',\n    directReports: [2, 3, 4]\n  }, {\n    id: 2,\n    name: 'Sarah Williams',\n    team: 'Engineering',\n    location: 'San Francisco',\n    jobRole: 'CTO',\n    imageUrl: '',\n    email: 'sarah.williams@company.com',\n    phone: '+1 (555) 000-0002',\n    linkedin: 'linkedin.com/in/sarahwilliams',\n    managerId: 1,\n    directReports: [5, 6]\n  }\n  // Add more users with hierarchy...\n  ];\n\n  // Find the root user (CEO/no manager)\n  const rootUser = mockUsers.find(user => !user.managerId);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      overflowX: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      sx: {\n        mb: 4\n      },\n      children: \"Organization Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        minWidth: 'fit-content',\n        p: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        lineWidth: '2px',\n        lineColor: '#D35400',\n        lineBorderRadius: '10px',\n        children: rootUser && buildOrgTree(mockUsers, rootUser.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_c4 = OrgChart;\nexport default OrgChart;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StyledNode\");\n$RefreshReg$(_c2, \"StyledTreeNode\");\n$RefreshReg$(_c3, \"OrgNode\");\n$RefreshReg$(_c4, \"OrgChart\");","map":{"version":3,"names":["React","Tree","TreeNode","Box","Card","CardContent","Typography","Avatar","styled","useTheme","jsxDEV","_jsxDEV","StyledNode","theme","display","borderRadius","spacing","minWidth","textAlign","boxShadow","shadows","_c","StyledTreeNode","padding","borderColor","_c2","OrgNode","user","_s","children","sx","flexDirection","alignItems","gap","src","imageUrl","alt","name","width","height","mb","fileName","_jsxFileName","lineNumber","columnNumber","variant","component","color","jobRole","team","_c3","buildOrgTree","users","rootId","find","u","id","directReports","filter","managerId","label","map","report","OrgChart","mockUsers","location","email","phone","linkedin","rootUser","p","overflowX","lineWidth","lineColor","lineBorderRadius","_c4","$RefreshReg$"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/src/components/OrgChart.tsx"],"sourcesContent":["import React from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport {\n    Box,\n    Card,\n    CardContent,\n    Typography,\n    Avatar,\n    styled,\n    useTheme\n} from '@mui/material';\nimport { User } from '../types/User';\n\n// Styled components for the org chart\nconst StyledNode = styled(Card)(({ theme }) => ({\n    display: 'inline-block',\n    borderRadius: theme.spacing(1),\n    minWidth: 240,\n    textAlign: 'center',\n    '&:hover': {\n        boxShadow: theme.shadows[4],\n    },\n}));\n\nconst StyledTreeNode = styled(TreeNode)({\n    padding: '16px',\n    '& .rst__lineHalfHorizontalRight::before, & .rst__lineHalfHorizontalLeft::before, & .rst__lineFullVertical::after': {\n        borderColor: '#D35400',\n    },\n});\n\ninterface OrgNodeProps {\n    user: User;\n}\n\nconst OrgNode: React.FC<OrgNodeProps> = ({ user }) => {\n    const theme = useTheme();\n    \n    return (\n        <StyledNode>\n            <CardContent>\n                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\n                    <Avatar\n                        src={user.imageUrl}\n                        alt={user.name}\n                        sx={{ width: 64, height: 64, mb: 1 }}\n                    />\n                    <Typography variant=\"h6\" component=\"div\">\n                        {user.name}\n                    </Typography>\n                    <Typography color=\"text.secondary\" variant=\"body2\">\n                        {user.jobRole}\n                    </Typography>\n                    <Typography color=\"text.secondary\" variant=\"body2\">\n                        {user.team}\n                    </Typography>\n                </Box>\n            </CardContent>\n        </StyledNode>\n    );\n};\n\n// Helper function to build the org chart tree\nconst buildOrgTree = (users: User[], rootId: number): React.ReactNode => {\n    const user = users.find(u => u.id === rootId);\n    if (!user) return null;\n\n    const directReports = users.filter(u => u.managerId === user.id);\n\n    return (\n        <StyledTreeNode label={<OrgNode user={user} />}>\n            {directReports.map(report => buildOrgTree(users, report.id))}\n        </StyledTreeNode>\n    );\n};\n\nconst OrgChart: React.FC = () => {\n    // Mock data with hierarchy\n    const mockUsers: User[] = [\n        {\n            id: 1,\n            name: 'John Doe',\n            team: 'Executive',\n            location: 'New York',\n            jobRole: 'CEO',\n            imageUrl: '',\n            email: 'john.doe@company.com',\n            phone: '+1 (555) 000-0001',\n            linkedin: 'linkedin.com/in/johndoe',\n            directReports: [2, 3, 4]\n        },\n        {\n            id: 2,\n            name: 'Sarah Williams',\n            team: 'Engineering',\n            location: 'San Francisco',\n            jobRole: 'CTO',\n            imageUrl: '',\n            email: 'sarah.williams@company.com',\n            phone: '+1 (555) 000-0002',\n            linkedin: 'linkedin.com/in/sarahwilliams',\n            managerId: 1,\n            directReports: [5, 6]\n        },\n        // Add more users with hierarchy...\n    ];\n\n    // Find the root user (CEO/no manager)\n    const rootUser = mockUsers.find(user => !user.managerId);\n    \n    return (\n        <Box sx={{ p: 3, overflowX: 'auto' }}>\n            <Typography variant=\"h4\" sx={{ mb: 4 }}>\n                Organization Chart\n            </Typography>\n            <Box sx={{ minWidth: 'fit-content', p: 4 }}>\n                <Tree\n                    lineWidth={'2px'}\n                    lineColor={'#D35400'}\n                    lineBorderRadius={'10px'}\n                >\n                    {rootUser && buildOrgTree(mockUsers, rootUser.id)}\n                </Tree>\n            </Box>\n        </Box>\n    );\n};\n\nexport default OrgChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}