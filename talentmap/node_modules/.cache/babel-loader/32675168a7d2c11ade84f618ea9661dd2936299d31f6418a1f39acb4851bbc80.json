{"ast":null,"code":"// 获取文本的字节长度\nexport var getNodeStrSize = function (node) {\n  var _a = (node || {}).measure,\n    _b = _a === void 0 ? {} : _a,\n    _c = _b.formattedValue,\n    formattedValue = _c === void 0 ? '' : _c,\n    _d = _b.value,\n    value = _d === void 0 ? '' : _d,\n    _e = _b.formattedUnit,\n    formattedUnit = _e === void 0 ? '' : _e;\n  var nodeStr = (formattedValue !== undefined && formattedValue !== null ? \"\".concat(formattedValue).concat(formattedUnit) : value) || '';\n  return nodeStr.replace(/[^\\x00-\\xff]/g, '00').length;\n};\n// 获取文本最长的节点\nexport var getMaxSizeNode = function (nodes) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n  return nodes.reduce(function (prevNode, node) {\n    var prevSize = getNodeStrSize(prevNode);\n    var nodeSize = getNodeStrSize(node);\n    return prevSize > nodeSize ? prevNode : node;\n  });\n};\n// 获取字符串实际渲染的宽度\nexport var getWordsWidth = function (text, font) {\n  if (text === void 0) {\n    text = '';\n  }\n  if (text === '') {\n    return 0;\n  }\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  context.font = font;\n  var width = context.measureText(text).width;\n  canvas = null;\n  return width;\n};\n// 获取最大节点宽度\nexport var getNodeMaxSize = function (nodes) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n  if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n    return 150;\n  }\n  var maxSizeNode = getMaxSizeNode(nodes);\n  var _a = maxSizeNode.measure,\n    _b = _a === void 0 ? {} : _a,\n    _c = _b.formattedValue,\n    formattedValue = _c === void 0 ? '' : _c,\n    _d = _b.value,\n    value = _d === void 0 ? '' : _d,\n    _e = _b.formattedUnit,\n    formattedUnit = _e === void 0 ? '' : _e;\n  // 是否展示formatValue\n  var isShowFormatValue = formattedValue !== undefined && formattedValue !== null;\n  var displayValue = isShowFormatValue ? formattedValue : value;\n  var displayValueWidth = getWordsWidth(\"\".concat(displayValue), '600 20px Roboto-Medium');\n  // 单位不为空时才计算单位宽度 unit的paddingLeft 4\n  var unitWidth = isShowFormatValue && formattedUnit ? getWordsWidth(\"\".concat(formattedUnit), '600 20px PingFangSC') + 4 : 0;\n  // 节点大小 value + unit + 左右padding\n  var nodeSize = displayValueWidth + unitWidth + 24;\n  // 节点最小宽度 150\n  return Math.max(nodeSize, 150);\n};","map":{"version":3,"names":["getNodeStrSize","node","_a","measure","_b","_c","formattedValue","_d","value","_e","formattedUnit","nodeStr","undefined","concat","replace","length","getMaxSizeNode","nodes","reduce","prevNode","prevSize","nodeSize","getWordsWidth","text","font","canvas","document","createElement","context","getContext","width","measureText","getNodeMaxSize","maxSizeNode","isShowFormatValue","displayValue","displayValueWidth","unitWidth","Math","max"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@ant-design/graphs/es/components/conversion-dagre-graph/utils/text.js"],"sourcesContent":["// 获取文本的字节长度\nexport var getNodeStrSize = function (node) {\n    var _a = (node || {}).measure, _b = _a === void 0 ? {} : _a, _c = _b.formattedValue, formattedValue = _c === void 0 ? '' : _c, _d = _b.value, value = _d === void 0 ? '' : _d, _e = _b.formattedUnit, formattedUnit = _e === void 0 ? '' : _e;\n    var nodeStr = (formattedValue !== undefined && formattedValue !== null\n        ? \"\".concat(formattedValue).concat(formattedUnit)\n        : value) || '';\n    return nodeStr.replace(/[^\\x00-\\xff]/g, '00').length;\n};\n// 获取文本最长的节点\nexport var getMaxSizeNode = function (nodes) {\n    if (nodes === void 0) { nodes = []; }\n    return nodes.reduce(function (prevNode, node) {\n        var prevSize = getNodeStrSize(prevNode);\n        var nodeSize = getNodeStrSize(node);\n        return prevSize > nodeSize ? prevNode : node;\n    });\n};\n// 获取字符串实际渲染的宽度\nexport var getWordsWidth = function (text, font) {\n    if (text === void 0) { text = ''; }\n    if (text === '') {\n        return 0;\n    }\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    context.font = font;\n    var width = context.measureText(text).width;\n    canvas = null;\n    return width;\n};\n// 获取最大节点宽度\nexport var getNodeMaxSize = function (nodes) {\n    if (nodes === void 0) { nodes = []; }\n    if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n        return 150;\n    }\n    var maxSizeNode = getMaxSizeNode(nodes);\n    var _a = maxSizeNode.measure, _b = _a === void 0 ? {} : _a, _c = _b.formattedValue, formattedValue = _c === void 0 ? '' : _c, _d = _b.value, value = _d === void 0 ? '' : _d, _e = _b.formattedUnit, formattedUnit = _e === void 0 ? '' : _e;\n    // 是否展示formatValue\n    var isShowFormatValue = formattedValue !== undefined && formattedValue !== null;\n    var displayValue = isShowFormatValue ? formattedValue : value;\n    var displayValueWidth = getWordsWidth(\"\".concat(displayValue), '600 20px Roboto-Medium');\n    // 单位不为空时才计算单位宽度 unit的paddingLeft 4\n    var unitWidth = isShowFormatValue && formattedUnit ? getWordsWidth(\"\".concat(formattedUnit), '600 20px PingFangSC') + 4 : 0;\n    // 节点大小 value + unit + 左右padding\n    var nodeSize = displayValueWidth + unitWidth + 24;\n    // 节点最小宽度 150\n    return Math.max(nodeSize, 150);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}