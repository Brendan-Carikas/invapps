{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@antv/g6-pc/node_modules/@antv/layout/src/layout/types.ts"],"sourcesContent":["import { Base } from \"./base\";\n\nexport interface Node {\n  id: string;\n}\n\nexport interface OutNode extends Node {\n  x: number;\n  y: number;\n  fx?: number;\n  fy?: number;\n  comboId?: string;\n  layer?: number; // dagre布局中指定的层级\n  _order?: number; // dagre布局中层内排序结果，用于增量布局\n  layout?: boolean;\n  size?: number | number[] | undefined;\n}\n\nexport interface Edge {\n  source: string;\n  target: string;\n}\n\nexport interface Combo {\n  id: string;\n  parentId?: string;\n  x?: number;\n  y?: number;\n  name?: string | number;\n  cx?: number;\n  cy?: number;\n  count?: number;\n  depth?: number;\n  children?: any[];\n  empty?: boolean;\n  minX?: number;\n  maxX?: number;\n  minY?: number;\n  maxY?: number;\n  size?: number;\n  r?: number;\n  itemType?: string;\n  collapsed?: boolean;\n}\n\nexport interface Model {\n  nodes?: Node[];\n  edges?: Edge[];\n  combos?: Combo[];\n  comboEdges?: Edge[];\n  hiddenNodes?: Node[];\n  hiddenEdges?: Edge[];\n  hiddenCombos?: Combo[];\n  vedges?: Edge[]; // temp edges e.g. the edge generated for releated collapsed combo\n}\n\nexport interface OutModel extends Model {\n  nodes?: OutNode[];\n}\n\nexport type PointTuple = [number, number];\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport type IndexMap = {\n  [key: string]: number;\n};\n\nexport type NodeMap = {\n  [key: string]: INode;\n};\n\n\nexport type Matrix = number[];\n\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type Degree = {\n  in: number;\n  out: number;\n  all: number;\n};\n\nexport interface ComboTree {\n  id: string;\n  children?: ComboTree[];\n  depth?: number;\n  parentId?: string;\n  itemType?: \"node\" | \"combo\";\n  [key: string]: unknown;\n}\nexport interface ComboConfig {\n  id: string;\n  parentId?: string;\n  children?: ComboTree[];\n  depth?: number;\n}\n\nexport interface CircularLayoutOptions {\n  type: \"circular\";\n  center?: PointTuple;\n  width?: number;\n  height?: number;\n  radius?: number | null;\n  startRadius?: number | null;\n  endRadius?: number | null;\n  clockwise?: boolean;\n  divisions?: number;\n  ordering?: \"topology\" | \"topology-directed\" | \"degree\" | null;\n  angleRatio?: number;\n  workerEnabled?: boolean;\n  startAngle?: number;\n  endAngle?: number;\n  onLayoutEnd?: () => void;\n}\n\nexport interface ComboForceLayoutOptions {\n  type: \"comboForce\";\n  center?: PointTuple;\n  maxIteration?: number;\n  linkDistance?: number | ((d?: unknown) => number);\n  nodeStrength?: number | ((d?: unknown) => number);\n  edgeStrength?: number | ((d?: unknown) => number);\n  preventOverlap?: boolean;\n  preventNodeOverlap?: boolean;\n  preventComboOverlap?: boolean;\n  collideStrength?: number | undefined;\n  nodeCollideStrength?: number | undefined;\n  comboCollideStrength?: number | undefined;\n  nodeSize?: number | number[] | ((d?: unknown) => number) | undefined;\n  nodeSpacing?: ((d?: unknown) => number) | number | undefined;\n  comboSpacing?: ((d?: unknown) => number) | number | undefined;\n  comboPadding?: ((d?: unknown) => number) | number | number[] | undefined;\n  alpha?: number;\n  alphaDecay?: number;\n  alphaMin?: number;\n  onTick?: () => void;\n  onLayoutEnd?: () => void;\n  gravity?: number;\n  comboGravity?: number;\n  optimizeRangeFactor?: number;\n  depthAttractiveForceScale?: number;\n  depthRepulsiveForceScale?: number;\n  velocityDecay?: number;\n  workerEnabled?: boolean;\n}\nexport interface ComboCombinedLayoutOptions {\n  type: \"comboConcentricForce\";\n  center?: PointTuple;\n  nodeSize?: number | number[] | ((d?: any) => number) | undefined;\n  spacing?: number | number[] | ((d?: any) => number) | undefined;\n  comboPadding?: ((d?: unknown) => number) | number | number[] | undefined;\n  comboTrees?: ComboTree[];\n  outerLayout?: Base;\n  innerLayout?: Base;\n}\n\nexport interface ConcentricLayoutOptions {\n  type: \"concentric\";\n  center?: PointTuple;\n  preventOverlap?: boolean;\n  nodeSize?: number | PointTuple;\n  minNodeSpacing?: number;\n  sweep?: number;\n  equidistant?: boolean;\n  startAngle?: number;\n  clockwise?: boolean;\n  maxLevelDiff?: number;\n  sortBy?: string;\n  workerEnabled?: boolean;\n  width?: number;\n  height?: number;\n  onLayoutEnd?: () => void;\n}\n\nexport interface DagreLayoutOptions {\n  type: \"dagre\";\n  rankdir?: \"TB\" | \"BT\" | \"LR\" | \"RL\";\n  align?: \"UL\" | \"UR\" | \"DL\" | \"DR\";\n  begin?: PointTuple;\n  nodeSize?: number | number[] | undefined;\n  nodesep?: number;\n  ranksep?: number;\n  controlPoints?: boolean;\n  sortByCombo?: boolean;\n  workerEnabled?: boolean;\n  edgeLabelSpace?: boolean;\n  nodeOrder?: string[];\n  preset?: {\n    nodes: OutNode[],\n    edges: any[],\n  };\n  onLayoutEnd?: () => void;\n  nodesepFunc?: ((d?: any) => number) | undefined;\n  ranksepFunc?: ((d?: any) => number) | undefined;\n}\n\nexport interface DagreCompoundLayoutOptions {\n  type?: \"dagreCompound\";\n  rankdir?: \"TB\" | \"BT\" | \"LR\" | \"RL\";\n  align?: \"UL\" | \"UR\" | \"DL\" | \"DR\";\n  begin?: PointTuple;\n  nodeSize?: number | number[] | undefined;\n  nodesep?: number;\n  ranksep?: number;\n  controlPoints?: boolean;\n  anchorPoint?: boolean;\n  settings?: any;\n  onLayoutEnd?: () => void;\n}\n\nexport interface FruchtermanLayoutOptions {\n  type: \"fruchterman\";\n  center?: PointTuple;\n  maxIteration?: number;\n  width?: number;\n  height?: number;\n  gravity?: number;\n  speed?: number;\n  clustering?: boolean;\n  clusterGravity?: number;\n  workerEnabled?: boolean;\n  gpuEnabled?: boolean;\n  onLayoutEnd?: () => void;\n}\n\nexport interface CentripetalOptions {\n  /** 叶子节点的施加力的因子 */\n  leaf?: number | ((node: INode, nodes: INode[], edges: Edge[]) => number);\n  /** 孤立节点的施加力的因子 */\n  single?: number | ((node: INode) => number);\n  /** 其他节点的施加力的因子 */\n  others?: number | ((node: INode) => number);\n  /** 向心力的中心点，默认为画布的中心 */\n  center?: (\n    node: INode,\n    nodes: INode[],\n    edges: Edge[],\n    width: number,\n    height: number,\n  ) => {\n    x: number;\n    y: number;\n    centerStrength?: number;\n  };\n}\nexport interface Force2LayoutOptions {\n  type?: \"force2\";\n  center?: PointTuple;\n  width?: number;\n  height?: number;\n  linkDistance?: number | ((edge?: any, source?: any, target?: any) => number) | undefined;\n  defSpringLen: number | ((edge?: any, source?: any, target?: any) => number) | undefined;\n  nodeStrength?: number | ((d?: any) => number) | undefined;\n  edgeStrength?: number | ((d?: any) => number) | undefined;\n  preventOverlap?: boolean;\n  nodeSize?: number | number[] | ((d?: any) => number) | undefined;\n  nodeSpacing?: number | number[] | ((d?: any) => number) | undefined;\n  minMovement?: number;\n  maxIteration?: number;\n  damping?: number;\n  maxSpeed?: number;\n  coulombDisScale?: number;\n  gravity?: number;\n  factor?: number;\n  workerEnabled?: boolean;\n  centripetalOptions?: CentripetalOptions;\n  leafCluster?: boolean;\n  clustering?: boolean;\n  nodeClusterBy?: string;\n  clusterNodeStrength?: number | ((node: Node) => number);\n  collideStrength?: number;\n  distanceThresholdMode?: 'mean' | 'max' | 'min';\n  animate?: boolean;\n  tick?: () => void;\n  onLayoutEnd?: () => void;\n  getMass?: ((d?: any) => number) | undefined;\n  getCenter?: ((d?: any, degree?: number) => number[]) | undefined;\n  monitor?: (params: { energy: number, nodes: INode[], edge: Edge[], iterations: number }) => void;\n\n}\n\nexport interface GForceLayoutOptions {\n  type?: \"gForce\";\n  center?: PointTuple;\n  width?: number;\n  height?: number;\n  linkDistance?: number | ((edge?: any, source?: any, target?: any) => number) | undefined;\n  nodeStrength?: number | ((d?: any) => number) | undefined;\n  edgeStrength?: number | ((d?: any) => number) | undefined;\n  preventOverlap?: boolean;\n  nodeSize?: number | number[] | ((d?: any) => number) | undefined;\n  nodeSpacing?: number | number[] | ((d?: any) => number) | undefined;\n  minMovement?: number;\n  maxIteration?: number;\n  damping?: number;\n  maxSpeed?: number;\n  coulombDisScale?: number;\n  getMass?: ((d?: any) => number) | undefined;\n  getCenter?: ((d?: any, degree?: number) => number[]) | undefined;\n  gravity?: number;\n  factor?: number;\n  tick?: () => void;\n  onLayoutEnd?: () => void;\n  workerEnabled?: boolean;\n  gpuEnabled?: boolean;\n}\n\ntype INode = OutNode & {\n  degree: number;\n  size: number | PointTuple;\n};\n\nexport interface GridLayoutOptions {\n  type: \"grid\";\n  width?: number;\n  height?: number;\n  begin?: PointTuple;\n  preventOverlap?: boolean;\n  nodeSize?: number | number[];\n  preventOverlapPadding?: number;\n  condense?: boolean;\n  rows?: number;\n  cols?: number;\n  sortBy?: string;\n  workerEnabled?: boolean;\n  position?: ((node: INode) => { row?: number; col?: number }) | undefined;\n  onLayoutEnd?: () => void;\n}\n\nexport interface MDSLayoutOptions {\n  type: \"mds\";\n  center?: PointTuple;\n  linkDistance?: number;\n  workerEnabled?: boolean;\n  onLayoutEnd?: () => void;\n}\n\nexport interface RandomLayoutOptions {\n  type: \"random\";\n  center?: PointTuple;\n  width?: number;\n  height?: number;\n  workerEnabled?: boolean;\n  onLayoutEnd?: () => void;\n}\n\nexport interface ForceLayoutOptions {\n  type: \"force\";\n  center?: PointTuple;\n  linkDistance?: number | ((d?: any) => number) | undefined;\n  edgeStrength?: number | ((d?: any) => number) | undefined;\n  nodeStrength?: number | ((d?: any) => number) | undefined;\n  preventOverlap?: boolean;\n  collideStrength?: number;\n  nodeSize?: number | number[] | ((d?: any) => number) | undefined;\n  nodeSpacing?: number | number[] | ((d?: any) => number) | undefined;\n  alpha?: number;\n  alphaDecay?: number;\n  alphaMin?: number;\n  clustering?: boolean;\n  clusterNodeStrength?: number;\n  clusterEdgeStrength?: number;\n  clusterEdgeDistance?: number;\n  clusterNodeSize?: number;\n  clusterFociStrength?: number;\n  forceSimulation?: any;\n  tick?: () => void;\n  onLayoutEnd?: () => void;\n  workerEnabled?: boolean;\n}\n\nexport interface RadialLayoutOptions {\n  type: \"radial\";\n  center?: PointTuple;\n  width?: number;\n  height?: number;\n  linkDistance?: number;\n  maxIteration?: number;\n  focusNode?: string | Node | null;\n  unitRadius?: number | null;\n  preventOverlap?: boolean;\n  nodeSize?: number | number[] | undefined;\n  nodeSpacing?: number | Function | undefined;\n  maxPreventOverlapIteration?: number;\n  strictRadial?: boolean;\n  sortBy?: string | undefined;\n  sortStrength?: number;\n  workerEnabled?: boolean;\n  onLayoutEnd?: () => void;\n}\n\nexport interface FruchtermanGPULayoutOptions {\n  type: \"fruchterman-gpu\";\n  center?: PointTuple;\n  width?: number;\n  height?: number;\n  maxIteration?: number;\n  gravity?: number;\n  speed?: number;\n  clustering?: boolean;\n  clusterGravity?: number;\n  workerEnabled?: boolean;\n  gpuEnabled?: boolean;\n  onLayoutEnd?: () => void;\n}\n\nexport interface GForceGPULayoutOptions {\n  type: \"gForce-gpu\";\n  center?: PointTuple;\n  linkDistance?: number | ((d?: any) => number) | undefined;\n  nodeStrength?: number | ((d?: any) => number) | undefined;\n  edgeStrength?: number | ((d?: any) => number) | undefined;\n  minMovement?: number;\n  maxIteration?: number;\n  damping?: number;\n  maxSpeed?: number;\n  coulombDisScale?: number;\n  getMass?: ((d?: any) => number) | undefined;\n  getCenter?: ((d?: any, degree?: number) => number[]) | undefined;\n  gravity?: number;\n  onLayoutEnd?: () => void;\n  workerEnabled?: boolean;\n  gpuEnabled?: boolean;\n}\n\n\nexport interface ForceAtlas2LayoutOptions {\n  type: \"forceAtlas2\";\n  center?: PointTuple;\n  width?: number;\n  height?: number;\n  workerEnabled?: boolean;\n  onLayoutEnd?: () => void;\n  tick?: () => void;\n  kr?: number;\n  kg?: number;\n  ks?: number;\n  ksmax?: number;\n  tao?: number;\n  maxIteration?: number;\n  mode?: 'normal' | 'linlog';\n  preventOverlap?: boolean;\n  dissuadeHubs?: boolean;\n  barnesHut?: boolean;\n  prune?: boolean;\n}\n\nexport interface ERLayoutOptions {\n  type: \"er\";\n  width?: number;\n  height?: number;\n  nodeMinGap?: number;\n}\nexport namespace ILayout {\n  export type LayoutTypes =\n    | \"grid\"\n    | \"random\"\n    | \"force\"\n    | \"circular\"\n    | \"dagre\"\n    | \"radial\"\n    | \"concentric\"\n    | \"mds\"\n    | \"fruchterman\"\n    | \"fruchterman-gpu\"\n    | \"gForce\"\n    | \"gForce-gpu\"\n    | \"comboForce\"\n    | \"forceAtlas2\"\n    | \"er\";\n\n  export type LayoutOptions =\n    | GridLayoutOptions\n    | RandomLayoutOptions\n    | ForceLayoutOptions\n    | CircularLayoutOptions\n    | DagreLayoutOptions\n    | RadialLayoutOptions\n    | ConcentricLayoutOptions\n    | MDSLayoutOptions\n    | FruchtermanLayoutOptions\n    | FruchtermanGPULayoutOptions\n    | GForceLayoutOptions\n    | GForceGPULayoutOptions\n    | ComboForceLayoutOptions\n    | ComboCombinedLayoutOptions\n    | ForceAtlas2LayoutOptions\n    | ERLayoutOptions;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}