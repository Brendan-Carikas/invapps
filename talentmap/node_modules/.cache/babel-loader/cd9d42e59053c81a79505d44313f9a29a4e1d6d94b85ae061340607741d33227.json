{"ast":null,"code":"var _jsxFileName = \"/Users/invotradesign/CascadeProjects/site-users-app/src/components/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/ThemeContext.tsx\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst THEME_STORAGE_KEY = 'app-theme-settings';\n\n// Default theme settings\nconst defaultSettings = {\n  mode: 'light',\n  primaryColor: '#1976d2',\n  secondaryColor: '#dc004e',\n  headingFont: 'Roboto',\n  bodyFont: 'Roboto'\n};\nexport const ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Load saved settings from localStorage or use defaults\n  const loadSavedSettings = () => {\n    const savedSettings = localStorage.getItem(THEME_STORAGE_KEY);\n    return savedSettings ? JSON.parse(savedSettings) : defaultSettings;\n  };\n  const [mode, setMode] = useState(loadSavedSettings().mode);\n  const [primaryColor, setPrimaryColor] = useState(loadSavedSettings().primaryColor);\n  const [secondaryColor, setSecondaryColor] = useState(loadSavedSettings().secondaryColor);\n  const [headingFont, setHeadingFont] = useState(loadSavedSettings().headingFont);\n  const [bodyFont, setBodyFont] = useState(loadSavedSettings().bodyFont);\n\n  // Save settings to localStorage\n  const saveSettings = () => {\n    const settings = {\n      mode,\n      primaryColor,\n      secondaryColor,\n      headingFont,\n      bodyFont\n    };\n    localStorage.setItem(THEME_STORAGE_KEY, JSON.stringify(settings));\n  };\n  const resetToDefaults = () => {\n    setMode(defaultSettings.mode);\n    setPrimaryColor(defaultSettings.primaryColor);\n    setSecondaryColor(defaultSettings.secondaryColor);\n    setHeadingFont(defaultSettings.headingFont);\n    setBodyFont(defaultSettings.bodyFont);\n  };\n\n  // Auto-save settings when they change\n  useEffect(() => {\n    saveSettings();\n  }, [mode, primaryColor, secondaryColor, headingFont, bodyFont]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode,\n      setMode,\n      primaryColor,\n      setPrimaryColor,\n      secondaryColor,\n      setSecondaryColor,\n      headingFont,\n      setHeadingFont,\n      bodyFont,\n      setBodyFont,\n      saveSettings,\n      resetToDefaults\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"Sm47Ix98GdUalv7Xdl8l55jW1h8=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","THEME_STORAGE_KEY","defaultSettings","mode","primaryColor","secondaryColor","headingFont","bodyFont","ThemeContext","undefined","useTheme","_s","context","Error","ThemeProvider","children","_s2","loadSavedSettings","savedSettings","localStorage","getItem","JSON","parse","setMode","setPrimaryColor","setSecondaryColor","setHeadingFont","setBodyFont","saveSettings","settings","setItem","stringify","resetToDefaults","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/src/components/ThemeContext.tsx"],"sourcesContent":["// src/contexts/ThemeContext.tsx\nimport { createContext, useContext, useState, ReactNode, useEffect } from 'react';\n\ninterface ThemeContextType {\n  mode: 'light' | 'dark';\n  setMode: (mode: 'light' | 'dark') => void;\n  primaryColor: string;\n  setPrimaryColor: (color: string) => void;\n  secondaryColor: string;\n  setSecondaryColor: (color: string) => void;\n  headingFont: string;\n  setHeadingFont: (font: string) => void;\n  bodyFont: string;\n  setBodyFont: (font: string) => void;\n  saveSettings: () => void;\n  resetToDefaults: () => void;\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst THEME_STORAGE_KEY = 'app-theme-settings';\n\n// Default theme settings\nconst defaultSettings = {\n  mode: 'light',\n  primaryColor: '#1976d2',\n  secondaryColor: '#dc004e',\n  headingFont: 'Roboto',\n  bodyFont: 'Roboto',\n};\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  // Load saved settings from localStorage or use defaults\n  const loadSavedSettings = () => {\n    const savedSettings = localStorage.getItem(THEME_STORAGE_KEY);\n    return savedSettings ? JSON.parse(savedSettings) : defaultSettings;\n  };\n\n  const [mode, setMode] = useState<'light' | 'dark'>(loadSavedSettings().mode);\n  const [primaryColor, setPrimaryColor] = useState(loadSavedSettings().primaryColor);\n  const [secondaryColor, setSecondaryColor] = useState(loadSavedSettings().secondaryColor);\n  const [headingFont, setHeadingFont] = useState(loadSavedSettings().headingFont);\n  const [bodyFont, setBodyFont] = useState(loadSavedSettings().bodyFont);\n\n  // Save settings to localStorage\n  const saveSettings = () => {\n    const settings = {\n      mode,\n      primaryColor,\n      secondaryColor,\n      headingFont,\n      bodyFont,\n    };\n    localStorage.setItem(THEME_STORAGE_KEY, JSON.stringify(settings));\n  };\n\n  const resetToDefaults = () => {\n    setMode(defaultSettings.mode);\n    setPrimaryColor(defaultSettings.primaryColor);\n    setSecondaryColor(defaultSettings.secondaryColor);\n    setHeadingFont(defaultSettings.headingFont);\n    setBodyFont(defaultSettings.bodyFont);\n  };\n\n  // Auto-save settings when they change\n  useEffect(() => {\n    saveSettings();\n  }, [mode, primaryColor, secondaryColor, headingFont, bodyFont]);\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        mode,\n        setMode,\n        primaryColor,\n        setPrimaryColor,\n        secondaryColor,\n        setSecondaryColor,\n        headingFont,\n        setHeadingFont,\n        bodyFont,\n        setBodyFont,\n        saveSettings,\n        resetToDefaults,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}