{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { Component } from 'react';\nimport G6 from '@antv/g6';\nimport { isEqual } from 'lodash';\nimport { DEFAULT_LAYOUT_OPTIONS, DEFAULT_NODE, DEFAULT_EDGE, DEFAULT_MODE } from './constants';\nimport { ITEM_STATE } from './types';\nimport { transformOriginData, drawLayerName, updateEdgeAnchorAndType } from './utils';\nimport registerBehavior from './behaviors';\nimport { resigterNodes } from './nodes';\nimport { resigterEdges } from './edges';\nimport { resigterLayout } from './layout';\nvar ConversionDagreGraph = /** @class */function (_super) {\n  __extends(ConversionDagreGraph, _super);\n  function ConversionDagreGraph(props) {\n    var _this = _super.call(this, props) || this;\n    // 图相关的注册\n    _this.registerGraphRelative = function () {\n      // 注册节点\n      resigterNodes();\n      // 注册边\n      resigterEdges();\n      // 注册布局\n      resigterLayout();\n    };\n    // 浅比较图数据: 只比较图结构有没有变化\n    _this.getGraphShallowDiff = function (data, prevData) {\n      if (data === void 0) {\n        data = {\n          nodes: [],\n          edges: []\n        };\n      }\n      if (prevData === void 0) {\n        prevData = {\n          nodes: [],\n          edges: []\n        };\n      }\n      var nodes = data.nodes,\n        edges = data.edges;\n      var prevNodes = prevData.nodes,\n        prevEdges = prevData.edges;\n      if (nodes.length !== prevNodes.length || edges.length !== prevEdges.length) {\n        return true;\n      }\n      var noNodeChange = nodes.every(function (node) {\n        return prevNodes.find(function (prevNode) {\n          return prevNode.id === node.id;\n        });\n      });\n      var noEdgeChange = edges.every(function (edge) {\n        return prevEdges.find(function (prevEdge) {\n          return prevEdge.id === edge.id;\n        });\n      });\n      return !(noNodeChange && noEdgeChange);\n    };\n    // 创建主图\n    _this.newGraph = function () {\n      var _a, _b;\n      if (_this.graph) {\n        _this.removeEventListener();\n        _this.graph.destroy();\n      }\n      var width = (_a = _this.container) === null || _a === void 0 ? void 0 : _a.scrollWidth;\n      var height = (_b = _this.container) === null || _b === void 0 ? void 0 : _b.scrollHeight;\n      var graph = new G6.Graph({\n        container: _this.container,\n        width: width,\n        height: height,\n        modes: {\n          default: DEFAULT_MODE\n        },\n        defaultNode: DEFAULT_NODE,\n        defaultEdge: DEFAULT_EDGE,\n        layout: _this.getLayoutParams(),\n        minZoom: 0.001\n      });\n      _this.graph = graph;\n      var onReady = _this.props.onReady;\n      if (onReady) {\n        onReady(graph);\n      }\n      // 注册自定义behavior\n      registerBehavior(_this.graph);\n      _this.addEventListener();\n    };\n    // 绘制节点和边\n    _this.renderGraph = function () {\n      var graphData = _this.state.graphData;\n      _this.graph.data(graphData);\n      _this.graph.render();\n    };\n    // 添加事件监听\n    _this.addEventListener = function () {\n      // 布局完成\n      _this.graph.on('afterlayout', _this.handleAfterLayout);\n    };\n    // 移除事件监听\n    _this.removeEventListener = function () {\n      var _a;\n      if (_this.graph && !((_a = _this.graph) === null || _a === void 0 ? void 0 : _a.destroyed)) {\n        // 移除布局完成监听\n        _this.graph.off('afterlayout', _this.handleAfterLayout);\n      }\n    };\n    // 获取布局参数\n    _this.getLayoutParams = function (forceLayout) {\n      var _a;\n      var _b = _this.props,\n        layout = _b.layout,\n        data = _b.data;\n      // 是否每个节点都有位置信息\n      var hasPosition = (_a = data === null || data === void 0 ? void 0 : data.nodes) === null || _a === void 0 ? void 0 : _a.every(function (node) {\n        return node.x !== undefined && node.y !== undefined;\n      });\n      // 如果每个节点都有位置信息，则走自定义preset布局\n      if (!forceLayout && hasPosition) {\n        return {\n          type: 'conv-preset'\n        };\n      }\n      return __assign(__assign(__assign(__assign({}, DEFAULT_LAYOUT_OPTIONS), {\n        ranksep: layout.rankdir === 'TB' ? 75 : 150\n      }), layout), {\n        type: 'dagre'\n      });\n    };\n    // 布局完成回调\n    _this.handleAfterLayout = function () {\n      var _a, _b;\n      var _c = _this.props,\n        layerOrder = _c.layerOrder,\n        rankdir = _c.layout.rankdir;\n      if (!(layerOrder === null || layerOrder === void 0 ? void 0 : layerOrder.length)) {\n        // 画布内容自适应视口大小\n        _this.graph.fitView(20);\n        return;\n      }\n      // 更新边对应的类型、起点和终点的连接点\n      updateEdgeAnchorAndType(_this.graph, layerOrder, rankdir);\n      // 绘制层级名称\n      drawLayerName(_this.graph, layerOrder, rankdir);\n      if (_this.shouldCacheZoomAndTranslate) {\n        // 设置画布缩放比、位移、选中元素\n        _this.setCacheGraph();\n      } else {\n        // 画布内容自适应视口大小\n        _this.graph.fitView(20);\n        // 首次非空图数据，缓存当前视口状态\n        if ((_b = (_a = _this.state.graphData) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.length) {\n          _this.shouldCacheZoomAndTranslate = true;\n          _this.handleCacheGraph();\n        }\n      }\n    };\n    // 缓存画布缩放比、画布位移、选中元素\n    _this.handleCacheGraph = function () {\n      if (!_this.graph || _this.graph.destroyed) {\n        return;\n      }\n      var width = _this.graph.get('width');\n      var height = _this.graph.get('height');\n      // 记录保存时的视口中心点对应的canvas坐标\n      var centerPoint = _this.graph.getCanvasByPoint(width / 2, height / 2);\n      // 选中的节点\n      var selectedNodes = _this.graph.getNodes().filter(function (node) {\n        return node.hasState(ITEM_STATE.Selected);\n      }).map(function (node) {\n        return node.get('id');\n      });\n      // 选中的边\n      var selectedEdges = _this.graph.getEdges().filter(function (edge) {\n        return edge.hasState(ITEM_STATE.Selected);\n      }).map(function (edge) {\n        return edge.get('id');\n      });\n      // 缓存视口数据\n      _this.cacheData = {\n        zoom: _this.graph.getZoom(),\n        centerPoint: centerPoint,\n        selectedNodes: selectedNodes,\n        selectedEdges: selectedEdges\n      };\n    };\n    // 设置画布缩放比、位移、选中的节点\n    _this.setCacheGraph = function () {\n      if (!_this.cacheData) {\n        return;\n      }\n      var _a = _this.cacheData,\n        selectedNodes = _a.selectedNodes,\n        selectedEdges = _a.selectedEdges,\n        zoom = _a.zoom,\n        _b = _a.centerPoint,\n        x = _b.x,\n        y = _b.y;\n      var width = _this.graph.get('width');\n      var height = _this.graph.get('height');\n      _this.graph.zoomTo(zoom);\n      // 获取视口中心点对应的canvas坐标\n      var newCenterPoint = _this.graph.getCanvasByPoint(width / 2, height / 2);\n      // 做视口中心点的平移\n      _this.graph.translate(x - newCenterPoint.x, y - newCenterPoint.y);\n      // 还原选中的节点状态\n      selectedNodes.forEach(function (selectedNode) {\n        _this.graph.setItemState(selectedNode, ITEM_STATE.Selected, true);\n      });\n      // 还原选中的边状态\n      selectedEdges.forEach(function (selectedEdge) {\n        _this.graph.setItemState(selectedEdge, ITEM_STATE.Selected, true);\n      });\n    };\n    _this.handleMouseDown = function (event) {\n      //阻止外层拖动影响\n      event.preventDefault();\n    };\n    _this.container = null;\n    _this.graph = null;\n    _this.shouldCacheZoomAndTranslate = false;\n    var data = props.data,\n      layerOrder = props.layerOrder,\n      segmLayer = props.segmLayer,\n      ratioMethod = props.ratioMethod;\n    _this.state = {\n      graphData: transformOriginData(data, layerOrder, segmLayer, ratioMethod)\n    };\n    return _this;\n  }\n  ConversionDagreGraph.prototype.componentDidMount = function () {\n    // 先做图相关的注册：如节点、边、布局\n    this.registerGraphRelative();\n    // 创建主图\n    this.newGraph();\n    // 绘制节点和边\n    this.renderGraph();\n  };\n  ConversionDagreGraph.getDerivedStateFromProps = function (props, state) {\n    var data = props.data,\n      layerOrder = props.layerOrder,\n      segmLayer = props.segmLayer,\n      ratioMethod = props.ratioMethod;\n    // props数据 -> G6渲染图数据\n    var graphData = transformOriginData(data, layerOrder, segmLayer, ratioMethod);\n    return {\n      graphData: graphData\n    };\n  };\n  ConversionDagreGraph.prototype.componentDidUpdate = function (prevProps) {\n    var _a = this.props,\n      layerOrder = _a.layerOrder,\n      layout = _a.layout,\n      data = _a.data;\n    // 缓存当前视口状态\n    this.handleCacheGraph();\n    var graphData = this.state.graphData;\n    var prevGraphData = transformOriginData(prevProps.data, prevProps.layerOrder, prevProps.segmLayer, prevProps.ratioMethod);\n    this.shouldCacheZoomAndTranslate = !this.getGraphShallowDiff(data, prevProps.data);\n    if (isEqual(prevGraphData, graphData) && !isEqual(layout, prevProps.layout)) {\n      // 仅更新布局\n      this.graph.updateLayout(this.getLayoutParams(!isEqual(layout, prevProps.layout)));\n      return;\n    }\n    // 数据变化或者层级顺序发生变化\n    if (!isEqual(prevGraphData, graphData) || !isEqual(layerOrder, prevProps.layerOrder)) {\n      // 更新布局\n      this.graph.updateLayout(this.getLayoutParams(!isEqual(layerOrder, prevProps.layerOrder)));\n      // 重新绘制节点和边\n      this.renderGraph();\n    }\n  };\n  ConversionDagreGraph.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var graphData = this.state.graphData;\n    var nextGraphData = transformOriginData(nextProps.data, nextProps.layerOrder, nextProps.segmLayer, nextProps.ratioMethod);\n    if (!isEqual(nextGraphData, graphData) || !isEqual(nextProps.layout, this.props.layout)) {\n      return true;\n    }\n    return false;\n  };\n  ConversionDagreGraph.prototype.componentWillUnmount = function () {\n    // 移除事件监听\n    this.removeEventListener();\n  };\n  ConversionDagreGraph.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      className = _a.className,\n      _b = _a.style,\n      propsStyle = _b === void 0 ? {} : _b;\n    var style = __assign({\n      width: '100%',\n      height: '100%'\n    }, propsStyle);\n    return React.createElement(\"div\", {\n      className: className,\n      style: style,\n      onMouseDown: this.handleMouseDown,\n      ref: function (container) {\n        _this.container = container;\n      }\n    });\n  };\n  ConversionDagreGraph.defaultProps = {\n    data: null,\n    layerOrder: [],\n    segmLayer: '',\n    ratioMethod: 'both',\n    layout: {\n      rankdir: 'TB' // 默认从上到下\n    }\n  };\n  return ConversionDagreGraph;\n}(Component);\nexport default ConversionDagreGraph;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","React","Component","G6","isEqual","DEFAULT_LAYOUT_OPTIONS","DEFAULT_NODE","DEFAULT_EDGE","DEFAULT_MODE","ITEM_STATE","transformOriginData","drawLayerName","updateEdgeAnchorAndType","registerBehavior","resigterNodes","resigterEdges","resigterLayout","ConversionDagreGraph","_super","props","_this","registerGraphRelative","getGraphShallowDiff","data","prevData","nodes","edges","prevNodes","prevEdges","noNodeChange","every","node","find","prevNode","id","noEdgeChange","edge","prevEdge","newGraph","_a","_b","graph","removeEventListener","destroy","width","container","scrollWidth","height","scrollHeight","Graph","modes","default","defaultNode","defaultEdge","layout","getLayoutParams","minZoom","onReady","addEventListener","renderGraph","graphData","state","render","on","handleAfterLayout","destroyed","off","forceLayout","hasPosition","x","undefined","y","type","ranksep","rankdir","_c","layerOrder","fitView","shouldCacheZoomAndTranslate","setCacheGraph","handleCacheGraph","get","centerPoint","getCanvasByPoint","selectedNodes","getNodes","filter","hasState","Selected","map","selectedEdges","getEdges","cacheData","zoom","getZoom","zoomTo","newCenterPoint","translate","forEach","selectedNode","setItemState","selectedEdge","handleMouseDown","event","preventDefault","segmLayer","ratioMethod","componentDidMount","getDerivedStateFromProps","componentDidUpdate","prevProps","prevGraphData","updateLayout","shouldComponentUpdate","nextProps","nextState","nextGraphData","componentWillUnmount","className","style","propsStyle","createElement","onMouseDown","ref","defaultProps"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@ant-design/graphs/es/components/conversion-dagre-graph/index.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Component } from 'react';\nimport G6 from '@antv/g6';\nimport { isEqual } from 'lodash';\nimport { DEFAULT_LAYOUT_OPTIONS, DEFAULT_NODE, DEFAULT_EDGE, DEFAULT_MODE } from './constants';\nimport { ITEM_STATE } from './types';\nimport { transformOriginData, drawLayerName, updateEdgeAnchorAndType } from './utils';\nimport registerBehavior from './behaviors';\nimport { resigterNodes } from './nodes';\nimport { resigterEdges } from './edges';\nimport { resigterLayout } from './layout';\nvar ConversionDagreGraph = /** @class */ (function (_super) {\n    __extends(ConversionDagreGraph, _super);\n    function ConversionDagreGraph(props) {\n        var _this = _super.call(this, props) || this;\n        // 图相关的注册\n        _this.registerGraphRelative = function () {\n            // 注册节点\n            resigterNodes();\n            // 注册边\n            resigterEdges();\n            // 注册布局\n            resigterLayout();\n        };\n        // 浅比较图数据: 只比较图结构有没有变化\n        _this.getGraphShallowDiff = function (data, prevData) {\n            if (data === void 0) { data = { nodes: [], edges: [] }; }\n            if (prevData === void 0) { prevData = { nodes: [], edges: [] }; }\n            var nodes = data.nodes, edges = data.edges;\n            var prevNodes = prevData.nodes, prevEdges = prevData.edges;\n            if (nodes.length !== prevNodes.length || edges.length !== prevEdges.length) {\n                return true;\n            }\n            var noNodeChange = nodes.every(function (node) { return prevNodes.find(function (prevNode) { return prevNode.id === node.id; }); });\n            var noEdgeChange = edges.every(function (edge) { return prevEdges.find(function (prevEdge) { return prevEdge.id === edge.id; }); });\n            return !(noNodeChange && noEdgeChange);\n        };\n        // 创建主图\n        _this.newGraph = function () {\n            var _a, _b;\n            if (_this.graph) {\n                _this.removeEventListener();\n                _this.graph.destroy();\n            }\n            var width = (_a = _this.container) === null || _a === void 0 ? void 0 : _a.scrollWidth;\n            var height = (_b = _this.container) === null || _b === void 0 ? void 0 : _b.scrollHeight;\n            var graph = new G6.Graph({\n                container: _this.container,\n                width: width,\n                height: height,\n                modes: {\n                    default: DEFAULT_MODE,\n                },\n                defaultNode: DEFAULT_NODE,\n                defaultEdge: DEFAULT_EDGE,\n                layout: _this.getLayoutParams(),\n                minZoom: 0.001,\n            });\n            _this.graph = graph;\n            var onReady = _this.props.onReady;\n            if (onReady) {\n                onReady(graph);\n            }\n            // 注册自定义behavior\n            registerBehavior(_this.graph);\n            _this.addEventListener();\n        };\n        // 绘制节点和边\n        _this.renderGraph = function () {\n            var graphData = _this.state.graphData;\n            _this.graph.data(graphData);\n            _this.graph.render();\n        };\n        // 添加事件监听\n        _this.addEventListener = function () {\n            // 布局完成\n            _this.graph.on('afterlayout', _this.handleAfterLayout);\n        };\n        // 移除事件监听\n        _this.removeEventListener = function () {\n            var _a;\n            if (_this.graph && !((_a = _this.graph) === null || _a === void 0 ? void 0 : _a.destroyed)) {\n                // 移除布局完成监听\n                _this.graph.off('afterlayout', _this.handleAfterLayout);\n            }\n        };\n        // 获取布局参数\n        _this.getLayoutParams = function (forceLayout) {\n            var _a;\n            var _b = _this.props, layout = _b.layout, data = _b.data;\n            // 是否每个节点都有位置信息\n            var hasPosition = (_a = data === null || data === void 0 ? void 0 : data.nodes) === null || _a === void 0 ? void 0 : _a.every(function (node) { return node.x !== undefined && node.y !== undefined; });\n            // 如果每个节点都有位置信息，则走自定义preset布局\n            if (!forceLayout && hasPosition) {\n                return {\n                    type: 'conv-preset',\n                };\n            }\n            return __assign(__assign(__assign(__assign({}, DEFAULT_LAYOUT_OPTIONS), { ranksep: layout.rankdir === 'TB' ? 75 : 150 }), layout), { type: 'dagre' });\n        };\n        // 布局完成回调\n        _this.handleAfterLayout = function () {\n            var _a, _b;\n            var _c = _this.props, layerOrder = _c.layerOrder, rankdir = _c.layout.rankdir;\n            if (!(layerOrder === null || layerOrder === void 0 ? void 0 : layerOrder.length)) {\n                // 画布内容自适应视口大小\n                _this.graph.fitView(20);\n                return;\n            }\n            // 更新边对应的类型、起点和终点的连接点\n            updateEdgeAnchorAndType(_this.graph, layerOrder, rankdir);\n            // 绘制层级名称\n            drawLayerName(_this.graph, layerOrder, rankdir);\n            if (_this.shouldCacheZoomAndTranslate) {\n                // 设置画布缩放比、位移、选中元素\n                _this.setCacheGraph();\n            }\n            else {\n                // 画布内容自适应视口大小\n                _this.graph.fitView(20);\n                // 首次非空图数据，缓存当前视口状态\n                if ((_b = (_a = _this.state.graphData) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.length) {\n                    _this.shouldCacheZoomAndTranslate = true;\n                    _this.handleCacheGraph();\n                }\n            }\n        };\n        // 缓存画布缩放比、画布位移、选中元素\n        _this.handleCacheGraph = function () {\n            if (!_this.graph || _this.graph.destroyed) {\n                return;\n            }\n            var width = _this.graph.get('width');\n            var height = _this.graph.get('height');\n            // 记录保存时的视口中心点对应的canvas坐标\n            var centerPoint = _this.graph.getCanvasByPoint(width / 2, height / 2);\n            // 选中的节点\n            var selectedNodes = _this.graph\n                .getNodes()\n                .filter(function (node) { return node.hasState(ITEM_STATE.Selected); })\n                .map(function (node) { return node.get('id'); });\n            // 选中的边\n            var selectedEdges = _this.graph\n                .getEdges()\n                .filter(function (edge) { return edge.hasState(ITEM_STATE.Selected); })\n                .map(function (edge) { return edge.get('id'); });\n            // 缓存视口数据\n            _this.cacheData = {\n                zoom: _this.graph.getZoom(),\n                centerPoint: centerPoint,\n                selectedNodes: selectedNodes,\n                selectedEdges: selectedEdges,\n            };\n        };\n        // 设置画布缩放比、位移、选中的节点\n        _this.setCacheGraph = function () {\n            if (!_this.cacheData) {\n                return;\n            }\n            var _a = _this.cacheData, selectedNodes = _a.selectedNodes, selectedEdges = _a.selectedEdges, zoom = _a.zoom, _b = _a.centerPoint, x = _b.x, y = _b.y;\n            var width = _this.graph.get('width');\n            var height = _this.graph.get('height');\n            _this.graph.zoomTo(zoom);\n            // 获取视口中心点对应的canvas坐标\n            var newCenterPoint = _this.graph.getCanvasByPoint(width / 2, height / 2);\n            // 做视口中心点的平移\n            _this.graph.translate(x - newCenterPoint.x, y - newCenterPoint.y);\n            // 还原选中的节点状态\n            selectedNodes.forEach(function (selectedNode) {\n                _this.graph.setItemState(selectedNode, ITEM_STATE.Selected, true);\n            });\n            // 还原选中的边状态\n            selectedEdges.forEach(function (selectedEdge) {\n                _this.graph.setItemState(selectedEdge, ITEM_STATE.Selected, true);\n            });\n        };\n        _this.handleMouseDown = function (event) {\n            //阻止外层拖动影响\n            event.preventDefault();\n        };\n        _this.container = null;\n        _this.graph = null;\n        _this.shouldCacheZoomAndTranslate = false;\n        var data = props.data, layerOrder = props.layerOrder, segmLayer = props.segmLayer, ratioMethod = props.ratioMethod;\n        _this.state = {\n            graphData: transformOriginData(data, layerOrder, segmLayer, ratioMethod),\n        };\n        return _this;\n    }\n    ConversionDagreGraph.prototype.componentDidMount = function () {\n        // 先做图相关的注册：如节点、边、布局\n        this.registerGraphRelative();\n        // 创建主图\n        this.newGraph();\n        // 绘制节点和边\n        this.renderGraph();\n    };\n    ConversionDagreGraph.getDerivedStateFromProps = function (props, state) {\n        var data = props.data, layerOrder = props.layerOrder, segmLayer = props.segmLayer, ratioMethod = props.ratioMethod;\n        // props数据 -> G6渲染图数据\n        var graphData = transformOriginData(data, layerOrder, segmLayer, ratioMethod);\n        return {\n            graphData: graphData,\n        };\n    };\n    ConversionDagreGraph.prototype.componentDidUpdate = function (prevProps) {\n        var _a = this.props, layerOrder = _a.layerOrder, layout = _a.layout, data = _a.data;\n        // 缓存当前视口状态\n        this.handleCacheGraph();\n        var graphData = this.state.graphData;\n        var prevGraphData = transformOriginData(prevProps.data, prevProps.layerOrder, prevProps.segmLayer, prevProps.ratioMethod);\n        this.shouldCacheZoomAndTranslate = !this.getGraphShallowDiff(data, prevProps.data);\n        if (isEqual(prevGraphData, graphData) && !isEqual(layout, prevProps.layout)) {\n            // 仅更新布局\n            this.graph.updateLayout(this.getLayoutParams(!isEqual(layout, prevProps.layout)));\n            return;\n        }\n        // 数据变化或者层级顺序发生变化\n        if (!isEqual(prevGraphData, graphData) || !isEqual(layerOrder, prevProps.layerOrder)) {\n            // 更新布局\n            this.graph.updateLayout(this.getLayoutParams(!isEqual(layerOrder, prevProps.layerOrder)));\n            // 重新绘制节点和边\n            this.renderGraph();\n        }\n    };\n    ConversionDagreGraph.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var graphData = this.state.graphData;\n        var nextGraphData = transformOriginData(nextProps.data, nextProps.layerOrder, nextProps.segmLayer, nextProps.ratioMethod);\n        if (!isEqual(nextGraphData, graphData) || !isEqual(nextProps.layout, this.props.layout)) {\n            return true;\n        }\n        return false;\n    };\n    ConversionDagreGraph.prototype.componentWillUnmount = function () {\n        // 移除事件监听\n        this.removeEventListener();\n    };\n    ConversionDagreGraph.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, className = _a.className, _b = _a.style, propsStyle = _b === void 0 ? {} : _b;\n        var style = __assign({ width: '100%', height: '100%' }, propsStyle);\n        return (React.createElement(\"div\", { className: className, style: style, onMouseDown: this.handleMouseDown, ref: function (container) {\n                _this.container = container;\n            } }));\n    };\n    ConversionDagreGraph.defaultProps = {\n        data: null,\n        layerOrder: [],\n        segmLayer: '',\n        ratioMethod: 'both',\n        layout: {\n            rankdir: 'TB', // 默认从上到下\n        },\n    };\n    return ConversionDagreGraph;\n}(Component));\nexport default ConversionDagreGraph;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIC,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IACrG,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnB,IAAI,OAAOA,CAAC,KAAK,UAAU,IAAIA,CAAC,KAAK,IAAI,EACrC,MAAM,IAAIS,SAAS,CAAC,sBAAsB,GAAGC,MAAM,CAACV,CAAC,CAAC,GAAG,+BAA+B,CAAC;IAC7FF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASW,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGb,CAAC;IAAE;IACtCA,CAAC,CAACO,SAAS,GAAGN,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACY,MAAM,CAACb,CAAC,CAAC,IAAIW,EAAE,CAACL,SAAS,GAAGN,CAAC,CAACM,SAAS,EAAE,IAAIK,EAAE,CAAC,CAAC,CAAC;EACxF,CAAC;AACL,CAAC,CAAE,CAAC;AACJ,IAAIG,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGb,MAAM,CAACc,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAIb,CAAC,IAAIY,CAAC,EAAE,IAAIhB,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACS,CAAC,EAAEZ,CAAC,CAAC,EAC3DW,CAAC,CAACX,CAAC,CAAC,GAAGY,CAAC,CAACZ,CAAC,CAAC;IACnB;IACA,OAAOW,CAAC;EACZ,CAAC;EACD,OAAOF,QAAQ,CAACQ,KAAK,CAAC,IAAI,EAAEF,SAAS,CAAC;AAC1C,CAAC;AACD,OAAOG,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,EAAE,MAAM,UAAU;AACzB,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,sBAAsB,EAAEC,YAAY,EAAEC,YAAY,EAAEC,YAAY,QAAQ,aAAa;AAC9F,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,mBAAmB,EAAEC,aAAa,EAAEC,uBAAuB,QAAQ,SAAS;AACrF,OAAOC,gBAAgB,MAAM,aAAa;AAC1C,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,cAAc,QAAQ,UAAU;AACzC,IAAIC,oBAAoB,GAAG,aAAe,UAAUC,MAAM,EAAE;EACxD3C,SAAS,CAAC0C,oBAAoB,EAAEC,MAAM,CAAC;EACvC,SAASD,oBAAoBA,CAACE,KAAK,EAAE;IACjC,IAAIC,KAAK,GAAGF,MAAM,CAAChC,IAAI,CAAC,IAAI,EAAEiC,KAAK,CAAC,IAAI,IAAI;IAC5C;IACAC,KAAK,CAACC,qBAAqB,GAAG,YAAY;MACtC;MACAP,aAAa,CAAC,CAAC;MACf;MACAC,aAAa,CAAC,CAAC;MACf;MACAC,cAAc,CAAC,CAAC;IACpB,CAAC;IACD;IACAI,KAAK,CAACE,mBAAmB,GAAG,UAAUC,IAAI,EAAEC,QAAQ,EAAE;MAClD,IAAID,IAAI,KAAK,KAAK,CAAC,EAAE;QAAEA,IAAI,GAAG;UAAEE,KAAK,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAG,CAAC;MAAE;MACxD,IAAIF,QAAQ,KAAK,KAAK,CAAC,EAAE;QAAEA,QAAQ,GAAG;UAAEC,KAAK,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAG,CAAC;MAAE;MAChE,IAAID,KAAK,GAAGF,IAAI,CAACE,KAAK;QAAEC,KAAK,GAAGH,IAAI,CAACG,KAAK;MAC1C,IAAIC,SAAS,GAAGH,QAAQ,CAACC,KAAK;QAAEG,SAAS,GAAGJ,QAAQ,CAACE,KAAK;MAC1D,IAAID,KAAK,CAAC1B,MAAM,KAAK4B,SAAS,CAAC5B,MAAM,IAAI2B,KAAK,CAAC3B,MAAM,KAAK6B,SAAS,CAAC7B,MAAM,EAAE;QACxE,OAAO,IAAI;MACf;MACA,IAAI8B,YAAY,GAAGJ,KAAK,CAACK,KAAK,CAAC,UAAUC,IAAI,EAAE;QAAE,OAAOJ,SAAS,CAACK,IAAI,CAAC,UAAUC,QAAQ,EAAE;UAAE,OAAOA,QAAQ,CAACC,EAAE,KAAKH,IAAI,CAACG,EAAE;QAAE,CAAC,CAAC;MAAE,CAAC,CAAC;MACnI,IAAIC,YAAY,GAAGT,KAAK,CAACI,KAAK,CAAC,UAAUM,IAAI,EAAE;QAAE,OAAOR,SAAS,CAACI,IAAI,CAAC,UAAUK,QAAQ,EAAE;UAAE,OAAOA,QAAQ,CAACH,EAAE,KAAKE,IAAI,CAACF,EAAE;QAAE,CAAC,CAAC;MAAE,CAAC,CAAC;MACnI,OAAO,EAAEL,YAAY,IAAIM,YAAY,CAAC;IAC1C,CAAC;IACD;IACAf,KAAK,CAACkB,QAAQ,GAAG,YAAY;MACzB,IAAIC,EAAE,EAAEC,EAAE;MACV,IAAIpB,KAAK,CAACqB,KAAK,EAAE;QACbrB,KAAK,CAACsB,mBAAmB,CAAC,CAAC;QAC3BtB,KAAK,CAACqB,KAAK,CAACE,OAAO,CAAC,CAAC;MACzB;MACA,IAAIC,KAAK,GAAG,CAACL,EAAE,GAAGnB,KAAK,CAACyB,SAAS,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACO,WAAW;MACtF,IAAIC,MAAM,GAAG,CAACP,EAAE,GAAGpB,KAAK,CAACyB,SAAS,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACQ,YAAY;MACxF,IAAIP,KAAK,GAAG,IAAItC,EAAE,CAAC8C,KAAK,CAAC;QACrBJ,SAAS,EAAEzB,KAAK,CAACyB,SAAS;QAC1BD,KAAK,EAAEA,KAAK;QACZG,MAAM,EAAEA,MAAM;QACdG,KAAK,EAAE;UACHC,OAAO,EAAE3C;QACb,CAAC;QACD4C,WAAW,EAAE9C,YAAY;QACzB+C,WAAW,EAAE9C,YAAY;QACzB+C,MAAM,EAAElC,KAAK,CAACmC,eAAe,CAAC,CAAC;QAC/BC,OAAO,EAAE;MACb,CAAC,CAAC;MACFpC,KAAK,CAACqB,KAAK,GAAGA,KAAK;MACnB,IAAIgB,OAAO,GAAGrC,KAAK,CAACD,KAAK,CAACsC,OAAO;MACjC,IAAIA,OAAO,EAAE;QACTA,OAAO,CAAChB,KAAK,CAAC;MAClB;MACA;MACA5B,gBAAgB,CAACO,KAAK,CAACqB,KAAK,CAAC;MAC7BrB,KAAK,CAACsC,gBAAgB,CAAC,CAAC;IAC5B,CAAC;IACD;IACAtC,KAAK,CAACuC,WAAW,GAAG,YAAY;MAC5B,IAAIC,SAAS,GAAGxC,KAAK,CAACyC,KAAK,CAACD,SAAS;MACrCxC,KAAK,CAACqB,KAAK,CAAClB,IAAI,CAACqC,SAAS,CAAC;MAC3BxC,KAAK,CAACqB,KAAK,CAACqB,MAAM,CAAC,CAAC;IACxB,CAAC;IACD;IACA1C,KAAK,CAACsC,gBAAgB,GAAG,YAAY;MACjC;MACAtC,KAAK,CAACqB,KAAK,CAACsB,EAAE,CAAC,aAAa,EAAE3C,KAAK,CAAC4C,iBAAiB,CAAC;IAC1D,CAAC;IACD;IACA5C,KAAK,CAACsB,mBAAmB,GAAG,YAAY;MACpC,IAAIH,EAAE;MACN,IAAInB,KAAK,CAACqB,KAAK,IAAI,EAAE,CAACF,EAAE,GAAGnB,KAAK,CAACqB,KAAK,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC0B,SAAS,CAAC,EAAE;QACxF;QACA7C,KAAK,CAACqB,KAAK,CAACyB,GAAG,CAAC,aAAa,EAAE9C,KAAK,CAAC4C,iBAAiB,CAAC;MAC3D;IACJ,CAAC;IACD;IACA5C,KAAK,CAACmC,eAAe,GAAG,UAAUY,WAAW,EAAE;MAC3C,IAAI5B,EAAE;MACN,IAAIC,EAAE,GAAGpB,KAAK,CAACD,KAAK;QAAEmC,MAAM,GAAGd,EAAE,CAACc,MAAM;QAAE/B,IAAI,GAAGiB,EAAE,CAACjB,IAAI;MACxD;MACA,IAAI6C,WAAW,GAAG,CAAC7B,EAAE,GAAGhB,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACE,KAAK,MAAM,IAAI,IAAIc,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACT,KAAK,CAAC,UAAUC,IAAI,EAAE;QAAE,OAAOA,IAAI,CAACsC,CAAC,KAAKC,SAAS,IAAIvC,IAAI,CAACwC,CAAC,KAAKD,SAAS;MAAE,CAAC,CAAC;MACvM;MACA,IAAI,CAACH,WAAW,IAAIC,WAAW,EAAE;QAC7B,OAAO;UACHI,IAAI,EAAE;QACV,CAAC;MACL;MACA,OAAOhF,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEa,sBAAsB,CAAC,EAAE;QAAEoE,OAAO,EAAEnB,MAAM,CAACoB,OAAO,KAAK,IAAI,GAAG,EAAE,GAAG;MAAI,CAAC,CAAC,EAAEpB,MAAM,CAAC,EAAE;QAAEkB,IAAI,EAAE;MAAQ,CAAC,CAAC;IACzJ,CAAC;IACD;IACApD,KAAK,CAAC4C,iBAAiB,GAAG,YAAY;MAClC,IAAIzB,EAAE,EAAEC,EAAE;MACV,IAAImC,EAAE,GAAGvD,KAAK,CAACD,KAAK;QAAEyD,UAAU,GAAGD,EAAE,CAACC,UAAU;QAAEF,OAAO,GAAGC,EAAE,CAACrB,MAAM,CAACoB,OAAO;MAC7E,IAAI,EAAEE,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAAC7E,MAAM,CAAC,EAAE;QAC9E;QACAqB,KAAK,CAACqB,KAAK,CAACoC,OAAO,CAAC,EAAE,CAAC;QACvB;MACJ;MACA;MACAjE,uBAAuB,CAACQ,KAAK,CAACqB,KAAK,EAAEmC,UAAU,EAAEF,OAAO,CAAC;MACzD;MACA/D,aAAa,CAACS,KAAK,CAACqB,KAAK,EAAEmC,UAAU,EAAEF,OAAO,CAAC;MAC/C,IAAItD,KAAK,CAAC0D,2BAA2B,EAAE;QACnC;QACA1D,KAAK,CAAC2D,aAAa,CAAC,CAAC;MACzB,CAAC,MACI;QACD;QACA3D,KAAK,CAACqB,KAAK,CAACoC,OAAO,CAAC,EAAE,CAAC;QACvB;QACA,IAAI,CAACrC,EAAE,GAAG,CAACD,EAAE,GAAGnB,KAAK,CAACyC,KAAK,CAACD,SAAS,MAAM,IAAI,IAAIrB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACd,KAAK,MAAM,IAAI,IAAIe,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACzC,MAAM,EAAE;UAClIqB,KAAK,CAAC0D,2BAA2B,GAAG,IAAI;UACxC1D,KAAK,CAAC4D,gBAAgB,CAAC,CAAC;QAC5B;MACJ;IACJ,CAAC;IACD;IACA5D,KAAK,CAAC4D,gBAAgB,GAAG,YAAY;MACjC,IAAI,CAAC5D,KAAK,CAACqB,KAAK,IAAIrB,KAAK,CAACqB,KAAK,CAACwB,SAAS,EAAE;QACvC;MACJ;MACA,IAAIrB,KAAK,GAAGxB,KAAK,CAACqB,KAAK,CAACwC,GAAG,CAAC,OAAO,CAAC;MACpC,IAAIlC,MAAM,GAAG3B,KAAK,CAACqB,KAAK,CAACwC,GAAG,CAAC,QAAQ,CAAC;MACtC;MACA,IAAIC,WAAW,GAAG9D,KAAK,CAACqB,KAAK,CAAC0C,gBAAgB,CAACvC,KAAK,GAAG,CAAC,EAAEG,MAAM,GAAG,CAAC,CAAC;MACrE;MACA,IAAIqC,aAAa,GAAGhE,KAAK,CAACqB,KAAK,CAC1B4C,QAAQ,CAAC,CAAC,CACVC,MAAM,CAAC,UAAUvD,IAAI,EAAE;QAAE,OAAOA,IAAI,CAACwD,QAAQ,CAAC9E,UAAU,CAAC+E,QAAQ,CAAC;MAAE,CAAC,CAAC,CACtEC,GAAG,CAAC,UAAU1D,IAAI,EAAE;QAAE,OAAOA,IAAI,CAACkD,GAAG,CAAC,IAAI,CAAC;MAAE,CAAC,CAAC;MACpD;MACA,IAAIS,aAAa,GAAGtE,KAAK,CAACqB,KAAK,CAC1BkD,QAAQ,CAAC,CAAC,CACVL,MAAM,CAAC,UAAUlD,IAAI,EAAE;QAAE,OAAOA,IAAI,CAACmD,QAAQ,CAAC9E,UAAU,CAAC+E,QAAQ,CAAC;MAAE,CAAC,CAAC,CACtEC,GAAG,CAAC,UAAUrD,IAAI,EAAE;QAAE,OAAOA,IAAI,CAAC6C,GAAG,CAAC,IAAI,CAAC;MAAE,CAAC,CAAC;MACpD;MACA7D,KAAK,CAACwE,SAAS,GAAG;QACdC,IAAI,EAAEzE,KAAK,CAACqB,KAAK,CAACqD,OAAO,CAAC,CAAC;QAC3BZ,WAAW,EAAEA,WAAW;QACxBE,aAAa,EAAEA,aAAa;QAC5BM,aAAa,EAAEA;MACnB,CAAC;IACL,CAAC;IACD;IACAtE,KAAK,CAAC2D,aAAa,GAAG,YAAY;MAC9B,IAAI,CAAC3D,KAAK,CAACwE,SAAS,EAAE;QAClB;MACJ;MACA,IAAIrD,EAAE,GAAGnB,KAAK,CAACwE,SAAS;QAAER,aAAa,GAAG7C,EAAE,CAAC6C,aAAa;QAAEM,aAAa,GAAGnD,EAAE,CAACmD,aAAa;QAAEG,IAAI,GAAGtD,EAAE,CAACsD,IAAI;QAAErD,EAAE,GAAGD,EAAE,CAAC2C,WAAW;QAAEb,CAAC,GAAG7B,EAAE,CAAC6B,CAAC;QAAEE,CAAC,GAAG/B,EAAE,CAAC+B,CAAC;MACrJ,IAAI3B,KAAK,GAAGxB,KAAK,CAACqB,KAAK,CAACwC,GAAG,CAAC,OAAO,CAAC;MACpC,IAAIlC,MAAM,GAAG3B,KAAK,CAACqB,KAAK,CAACwC,GAAG,CAAC,QAAQ,CAAC;MACtC7D,KAAK,CAACqB,KAAK,CAACsD,MAAM,CAACF,IAAI,CAAC;MACxB;MACA,IAAIG,cAAc,GAAG5E,KAAK,CAACqB,KAAK,CAAC0C,gBAAgB,CAACvC,KAAK,GAAG,CAAC,EAAEG,MAAM,GAAG,CAAC,CAAC;MACxE;MACA3B,KAAK,CAACqB,KAAK,CAACwD,SAAS,CAAC5B,CAAC,GAAG2B,cAAc,CAAC3B,CAAC,EAAEE,CAAC,GAAGyB,cAAc,CAACzB,CAAC,CAAC;MACjE;MACAa,aAAa,CAACc,OAAO,CAAC,UAAUC,YAAY,EAAE;QAC1C/E,KAAK,CAACqB,KAAK,CAAC2D,YAAY,CAACD,YAAY,EAAE1F,UAAU,CAAC+E,QAAQ,EAAE,IAAI,CAAC;MACrE,CAAC,CAAC;MACF;MACAE,aAAa,CAACQ,OAAO,CAAC,UAAUG,YAAY,EAAE;QAC1CjF,KAAK,CAACqB,KAAK,CAAC2D,YAAY,CAACC,YAAY,EAAE5F,UAAU,CAAC+E,QAAQ,EAAE,IAAI,CAAC;MACrE,CAAC,CAAC;IACN,CAAC;IACDpE,KAAK,CAACkF,eAAe,GAAG,UAAUC,KAAK,EAAE;MACrC;MACAA,KAAK,CAACC,cAAc,CAAC,CAAC;IAC1B,CAAC;IACDpF,KAAK,CAACyB,SAAS,GAAG,IAAI;IACtBzB,KAAK,CAACqB,KAAK,GAAG,IAAI;IAClBrB,KAAK,CAAC0D,2BAA2B,GAAG,KAAK;IACzC,IAAIvD,IAAI,GAAGJ,KAAK,CAACI,IAAI;MAAEqD,UAAU,GAAGzD,KAAK,CAACyD,UAAU;MAAE6B,SAAS,GAAGtF,KAAK,CAACsF,SAAS;MAAEC,WAAW,GAAGvF,KAAK,CAACuF,WAAW;IAClHtF,KAAK,CAACyC,KAAK,GAAG;MACVD,SAAS,EAAElD,mBAAmB,CAACa,IAAI,EAAEqD,UAAU,EAAE6B,SAAS,EAAEC,WAAW;IAC3E,CAAC;IACD,OAAOtF,KAAK;EAChB;EACAH,oBAAoB,CAACjC,SAAS,CAAC2H,iBAAiB,GAAG,YAAY;IAC3D;IACA,IAAI,CAACtF,qBAAqB,CAAC,CAAC;IAC5B;IACA,IAAI,CAACiB,QAAQ,CAAC,CAAC;IACf;IACA,IAAI,CAACqB,WAAW,CAAC,CAAC;EACtB,CAAC;EACD1C,oBAAoB,CAAC2F,wBAAwB,GAAG,UAAUzF,KAAK,EAAE0C,KAAK,EAAE;IACpE,IAAItC,IAAI,GAAGJ,KAAK,CAACI,IAAI;MAAEqD,UAAU,GAAGzD,KAAK,CAACyD,UAAU;MAAE6B,SAAS,GAAGtF,KAAK,CAACsF,SAAS;MAAEC,WAAW,GAAGvF,KAAK,CAACuF,WAAW;IAClH;IACA,IAAI9C,SAAS,GAAGlD,mBAAmB,CAACa,IAAI,EAAEqD,UAAU,EAAE6B,SAAS,EAAEC,WAAW,CAAC;IAC7E,OAAO;MACH9C,SAAS,EAAEA;IACf,CAAC;EACL,CAAC;EACD3C,oBAAoB,CAACjC,SAAS,CAAC6H,kBAAkB,GAAG,UAAUC,SAAS,EAAE;IACrE,IAAIvE,EAAE,GAAG,IAAI,CAACpB,KAAK;MAAEyD,UAAU,GAAGrC,EAAE,CAACqC,UAAU;MAAEtB,MAAM,GAAGf,EAAE,CAACe,MAAM;MAAE/B,IAAI,GAAGgB,EAAE,CAAChB,IAAI;IACnF;IACA,IAAI,CAACyD,gBAAgB,CAAC,CAAC;IACvB,IAAIpB,SAAS,GAAG,IAAI,CAACC,KAAK,CAACD,SAAS;IACpC,IAAImD,aAAa,GAAGrG,mBAAmB,CAACoG,SAAS,CAACvF,IAAI,EAAEuF,SAAS,CAAClC,UAAU,EAAEkC,SAAS,CAACL,SAAS,EAAEK,SAAS,CAACJ,WAAW,CAAC;IACzH,IAAI,CAAC5B,2BAA2B,GAAG,CAAC,IAAI,CAACxD,mBAAmB,CAACC,IAAI,EAAEuF,SAAS,CAACvF,IAAI,CAAC;IAClF,IAAInB,OAAO,CAAC2G,aAAa,EAAEnD,SAAS,CAAC,IAAI,CAACxD,OAAO,CAACkD,MAAM,EAAEwD,SAAS,CAACxD,MAAM,CAAC,EAAE;MACzE;MACA,IAAI,CAACb,KAAK,CAACuE,YAAY,CAAC,IAAI,CAACzD,eAAe,CAAC,CAACnD,OAAO,CAACkD,MAAM,EAAEwD,SAAS,CAACxD,MAAM,CAAC,CAAC,CAAC;MACjF;IACJ;IACA;IACA,IAAI,CAAClD,OAAO,CAAC2G,aAAa,EAAEnD,SAAS,CAAC,IAAI,CAACxD,OAAO,CAACwE,UAAU,EAAEkC,SAAS,CAAClC,UAAU,CAAC,EAAE;MAClF;MACA,IAAI,CAACnC,KAAK,CAACuE,YAAY,CAAC,IAAI,CAACzD,eAAe,CAAC,CAACnD,OAAO,CAACwE,UAAU,EAAEkC,SAAS,CAAClC,UAAU,CAAC,CAAC,CAAC;MACzF;MACA,IAAI,CAACjB,WAAW,CAAC,CAAC;IACtB;EACJ,CAAC;EACD1C,oBAAoB,CAACjC,SAAS,CAACiI,qBAAqB,GAAG,UAAUC,SAAS,EAAEC,SAAS,EAAE;IACnF,IAAIvD,SAAS,GAAG,IAAI,CAACC,KAAK,CAACD,SAAS;IACpC,IAAIwD,aAAa,GAAG1G,mBAAmB,CAACwG,SAAS,CAAC3F,IAAI,EAAE2F,SAAS,CAACtC,UAAU,EAAEsC,SAAS,CAACT,SAAS,EAAES,SAAS,CAACR,WAAW,CAAC;IACzH,IAAI,CAACtG,OAAO,CAACgH,aAAa,EAAExD,SAAS,CAAC,IAAI,CAACxD,OAAO,CAAC8G,SAAS,CAAC5D,MAAM,EAAE,IAAI,CAACnC,KAAK,CAACmC,MAAM,CAAC,EAAE;MACrF,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC;EACDrC,oBAAoB,CAACjC,SAAS,CAACqI,oBAAoB,GAAG,YAAY;IAC9D;IACA,IAAI,CAAC3E,mBAAmB,CAAC,CAAC;EAC9B,CAAC;EACDzB,oBAAoB,CAACjC,SAAS,CAAC8E,MAAM,GAAG,YAAY;IAChD,IAAI1C,KAAK,GAAG,IAAI;IAChB,IAAImB,EAAE,GAAG,IAAI,CAACpB,KAAK;MAAEmG,SAAS,GAAG/E,EAAE,CAAC+E,SAAS;MAAE9E,EAAE,GAAGD,EAAE,CAACgF,KAAK;MAAEC,UAAU,GAAGhF,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;IAClG,IAAI+E,KAAK,GAAG/H,QAAQ,CAAC;MAAEoD,KAAK,EAAE,MAAM;MAAEG,MAAM,EAAE;IAAO,CAAC,EAAEyE,UAAU,CAAC;IACnE,OAAQvH,KAAK,CAACwH,aAAa,CAAC,KAAK,EAAE;MAAEH,SAAS,EAAEA,SAAS;MAAEC,KAAK,EAAEA,KAAK;MAAEG,WAAW,EAAE,IAAI,CAACpB,eAAe;MAAEqB,GAAG,EAAE,SAAAA,CAAU9E,SAAS,EAAE;QAC9HzB,KAAK,CAACyB,SAAS,GAAGA,SAAS;MAC/B;IAAE,CAAC,CAAC;EACZ,CAAC;EACD5B,oBAAoB,CAAC2G,YAAY,GAAG;IAChCrG,IAAI,EAAE,IAAI;IACVqD,UAAU,EAAE,EAAE;IACd6B,SAAS,EAAE,EAAE;IACbC,WAAW,EAAE,MAAM;IACnBpD,MAAM,EAAE;MACJoB,OAAO,EAAE,IAAI,CAAE;IACnB;EACJ,CAAC;EACD,OAAOzD,oBAAoB;AAC/B,CAAC,CAACf,SAAS,CAAE;AACb,eAAee,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}