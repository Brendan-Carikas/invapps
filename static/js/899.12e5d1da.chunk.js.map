{"version":3,"file":"static/js/899.12e5d1da.chunk.js","mappings":"+WAmBaA,EAAa,SAAHC,GAAkG,IAA5FC,EAAQD,EAARC,SAAUC,EAAQF,EAARE,SAAUC,EAAYH,EAAZG,aAAcC,EAAYJ,EAAZI,aAAcC,EAAeL,EAAfK,gBAAiBC,EAAKN,EAALM,MAAOC,EAAYP,EAAZO,aACnGC,GAAiDC,EAAAA,EAAAA,KAAzCC,EAAOF,EAAPE,QAASC,EAAWH,EAAXG,YAAaC,EAAcJ,EAAdI,eAcxBC,GACJC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,IAAEC,EAAAA,EAAAA,GAAA,CACLC,MAAO,OACPC,SAAU,QACVC,EAAG,EACHC,GAAI,OACJC,QAAS,OACTC,cAAe,SACfC,WAAY,UACRZ,GAAkB,CACpBa,QAAS,mBACTC,aAAc,EACdC,UAAW,IAEbC,SAAA,EACAC,EAAAA,EAAAA,KAACd,EAAAA,EAAG,CAACO,QAAQ,OAAOQ,eAAe,SAASC,GAAI,EAAEH,UAChDC,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,OAGXH,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAACC,MAAM,SAASrB,GAAI,CAAEe,GAAI,GAAIH,SAAC,YAIlFtB,IACCuB,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CAACC,SAAS,QAAQvB,GAAI,CAAEe,GAAI,EAAGb,MAAO,QAASU,SAClDtB,KAILuB,EAAAA,EAAAA,KAAA,QAAM5B,SAAUA,EAAUuC,MAAO,CAAEtB,MAAO,QAASU,UACjDd,EAAAA,EAAAA,MAAC2B,EAAAA,EAAK,CAACC,QAAS,EAAEd,SAAA,EAChBC,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRC,MAAM,QACNC,KAAK,QACLC,KAAK,QACLC,MAAO7C,EAAS8C,MAChBC,SAAU9C,EACV+C,WAAS,EACTC,UAAQ,KAGVtB,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRC,MAAM,WACNC,KAAMzC,EAAe,OAAS,WAC9B0C,KAAK,WACLC,MAAO7C,EAASkD,SAChBH,SAAU9C,EACV+C,WAAS,EACTC,UAAQ,EACRE,WAAY,CACVC,cACEzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAc,CAACC,SAAS,MAAK5B,UAC5BC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CACT,aAAW,6BACXC,QAAS,kBAAMrD,GAAiBD,EAAa,EAC7CuD,KAAK,MAAK/B,SAETxB,GAAeyB,EAAAA,EAAAA,KAAC+B,EAAAA,EAAiB,KAAM/B,EAAAA,EAAAA,KAACgC,EAAAA,EAAc,YAOjEhC,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRC,MAAM,mBACNC,KAAMzC,EAAe,OAAS,WAC9B0C,KAAK,kBACLC,MAAO7C,EAAS4D,gBAChBb,SAAU9C,EACV+C,WAAS,EACTC,UAAQ,KAGVtB,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CACLlB,KAAK,SACLX,QAAQ,YACR8B,MAAM,UACNC,KAAK,QACLf,WAAS,EAAAtB,SACV,aAIDC,EAAAA,EAAAA,KAACd,EAAAA,EAAG,CAACC,GAAI,CAAEkD,UAAW,SAAUC,GAAI,GAAIvC,UACtCd,EAAAA,EAAAA,MAACmB,EAAAA,EAAU,CAACC,QAAQ,QAAQ8B,MAAM,gBAAepC,SAAA,CAAC,2BACvB,IACxBrB,GACCsB,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CACLC,MAAM,UACNN,QAASnD,EACTS,GAAI,CAAEoD,cAAe,OAAQhD,EAAG,EAAGiD,SAAU,QAASzC,SACvD,aAIDC,EAAAA,EAAAA,KAACyC,EAAAA,GAAI,CAACC,GAAG,SAAS/B,MAAO,CAAEwB,MAAO,WAAYpC,SAAC,yBAW7D,OAAIlB,GAEAmB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CAACC,MAAM,EAAK7C,UAChBd,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GA1HQ,CACjBwC,SAAU,WACVkB,IAAK,MACLC,KAAM,MACNC,UAAW,wBACX1D,MAAO,MACPC,SAAU,SACVO,aAAc,OACdmD,SAAU,SACVvD,QAAS,QAiHeM,SAAA,CACjBhB,IACCiB,EAAAA,EAAAA,KAACd,EAAAA,EAAG,CACFC,GAAI,CACF8D,KAAM,UACNC,gBAAgB,OAADC,OAASrE,GAAe,yCAAwC,KAC/EsE,eAAgB,QAChBC,mBAAoB,SACpB5D,QAAS,CAAE6D,GAAI,OAAQC,GAAI,YAIhCvE,OAMFA,CACT,EAkDA,UAhDe,WACb,IAAAwE,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDjF,EAAYmF,EAAA,GAAElF,EAAekF,EAAA,GACpCE,GAA0BH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA/BnF,EAAKoF,EAAA,GAAEC,EAAQD,EAAA,GACtBE,GAAgCN,EAAAA,EAAAA,UAAS,CACvCtC,MAAO,GACPI,SAAU,GACVU,gBAAiB,KACjB+B,GAAAL,EAAAA,EAAAA,GAAAI,EAAA,GAJK1F,EAAQ2F,EAAA,GAAEC,EAAWD,EAAA,GAKpBE,GAAWC,EAAAA,EAAAA,KAAXD,OAUFE,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAC,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACR,GAAnBJ,EAAEK,iBACE1G,EAASkD,WAAalD,EAAS4D,gBAAe,CAAA2C,EAAAE,KAAA,QACd,OAAlChB,EAAS,yBAAyBc,EAAAI,OAAA,wBAAAJ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAI5BZ,EAAO7F,EAAS8C,MAAO9C,EAASkD,UAAU,KAAD,EAAAqD,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAE/Cd,EAAS,+BAA+B,yBAAAc,EAAAM,OAAA,GAAAT,EAAA,kBAE3C,gBAXiBU,GAAA,OAAAd,EAAAe,MAAA,KAAAC,UAAA,KAiBlB,OACErF,EAAAA,EAAAA,KAAC9B,EAAU,CACTE,SAAUgG,EACV/F,SAAUA,EACVC,aA7BiB,SAACoG,GACpB,IAAAY,EAAwBZ,EAAEa,OAAlBtE,EAAIqE,EAAJrE,KAAMC,EAAKoE,EAALpE,MACd+C,GAAY,SAAAY,GAAI,OAAAzF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXyF,GAAI,IAAAW,EAAAA,EAAAA,GAAA,GACNvE,EAAOC,GAAK,GAEjB,EAwBI3C,aAAcA,EACdC,gBAAiBA,EACjBC,MAAOA,EACPgH,aAZqB,WACvB,GAcJ,C","sources":["views/auth/Signup.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Box,\n  Typography,\n  Button,\n  Stack,\n  TextField,\n  Alert,\n  InputAdornment,\n  IconButton,\n  Modal,\n} from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { useAuthBackground } from \"../../contexts/AuthBackgroundContext\";\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport LogoIcon from \"../../layouts/FullLayout/Logo/LogoIcon\";\n\nexport const SignupForm = ({ onSubmit, formData, handleChange, showPassword, setShowPassword, error, onLoginClick }) => {\n  const { isModal, customImage, showBackground } = useAuthBackground();\n\n  const modalStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '90%',\n    maxWidth: '1000px',\n    borderRadius: '12px',\n    overflow: 'hidden',\n    display: 'flex',\n  };\n\n  const formContent = (\n    <Box sx={{ \n      width: '100%',\n      maxWidth: '400px',\n      p: 3,\n      mx: 'auto',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      ...(showBackground && {\n        bgcolor: 'background.paper',\n        borderRadius: 2,\n        boxShadow: 1\n      })\n    }}>\n      <Box display=\"flex\" justifyContent=\"center\" mb={4}>\n        <LogoIcon />\n      </Box>\n      \n      <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\" sx={{ mb: 4 }}>\n        Sign Up\n      </Typography>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3, width: '100%' }}>\n          {error}\n        </Alert>\n      )}\n\n      <form onSubmit={onSubmit} style={{ width: '100%' }}>\n        <Stack spacing={3}>\n          <TextField\n            label=\"Email\"\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            fullWidth\n            required\n          />\n\n          <TextField\n            label=\"Password\"\n            type={showPassword ? \"text\" : \"password\"}\n            name=\"password\"\n            value={formData.password}\n            onChange={handleChange}\n            fullWidth\n            required\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    edge=\"end\"\n                  >\n                    {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n\n          <TextField\n            label=\"Confirm Password\"\n            type={showPassword ? \"text\" : \"password\"}\n            name=\"confirmPassword\"\n            value={formData.confirmPassword}\n            onChange={handleChange}\n            fullWidth\n            required\n          />\n\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            fullWidth\n          >\n            Sign Up\n          </Button>\n\n          <Box sx={{ textAlign: 'center', mt: 2 }}>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Already have an account?{' '}\n              {onLoginClick ? (\n                <Button\n                  color=\"primary\"\n                  onClick={onLoginClick}\n                  sx={{ textTransform: 'none', p: 0, minWidth: 'auto' }}\n                >\n                  Sign in\n                </Button>\n              ) : (\n                <Link to=\"/login\" style={{ color: 'inherit' }}>\n                  Sign in\n                </Link>\n              )}\n            </Typography>\n          </Box>\n        </Stack>\n      </form>\n    </Box>\n  );\n\n  if (isModal) {\n    return (\n      <Modal open={true}>\n        <Box sx={modalStyle}>\n          {showBackground && (\n            <Box\n              sx={{\n                flex: '1 1 60%',\n                backgroundImage: `url(${customImage || '/static/images/backgrounds/auth-bg.png'})`,\n                backgroundSize: 'cover',\n                backgroundPosition: 'center',\n                display: { xs: 'none', md: 'block' }\n              }}\n            />\n          )}\n          {formContent}\n        </Box>\n      </Modal>\n    );\n  }\n\n  return formContent;\n};\n\nconst Signup = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { signup } = useAuth();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Passwords don't match\");\n      return;\n    }\n    try {\n      await signup(formData.email, formData.password);\n    } catch (error) {\n      setError(\"Failed to create an account\");\n    }\n  };\n\n  const handleToggleForm = () => {\n    // Add your form toggle logic here\n  };\n\n  return (\n    <SignupForm\n      onSubmit={handleSubmit}\n      formData={formData}\n      handleChange={handleChange}\n      showPassword={showPassword}\n      setShowPassword={setShowPassword}\n      error={error}\n      onToggleForm={handleToggleForm}\n    />\n  );\n};\n\nexport default Signup;\n"],"names":["SignupForm","_ref","onSubmit","formData","handleChange","showPassword","setShowPassword","error","onLoginClick","_useAuthBackground","useAuthBackground","isModal","customImage","showBackground","formContent","_jsxs","Box","sx","_objectSpread","width","maxWidth","p","mx","display","flexDirection","alignItems","bgcolor","borderRadius","boxShadow","children","_jsx","justifyContent","mb","LogoIcon","Typography","variant","component","gutterBottom","align","Alert","severity","style","Stack","spacing","TextField","label","type","name","value","email","onChange","fullWidth","required","password","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","VisibilityOffIcon","VisibilityIcon","confirmPassword","Button","color","size","textAlign","mt","textTransform","minWidth","Link","to","Modal","open","top","left","transform","overflow","flex","backgroundImage","concat","backgroundSize","backgroundPosition","xs","md","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setError","_useState5","_useState6","setFormData","signup","useAuth","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","preventDefault","abrupt","t0","stop","_x","apply","arguments","_e$target","target","_defineProperty","onToggleForm"],"sourceRoot":""}