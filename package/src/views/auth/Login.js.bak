import React, { useState } from "react";
import {
  Box,
  Typography,
  FormGroup,
  FormControlLabel,
  Button,
  Stack,
  Checkbox,
  TextField,
  Alert,
  InputAdornment,
  IconButton,
} from "@mui/material";
import { Link } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import { useLoginDisplay } from "../../contexts/LoginDisplayContext";
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';

import LogoIcon from "../../layouts/FullLayout/Logo/LogoIcon";

const Login = () => {
  const { login } = useAuth();
  const { displayStyle, customImage } = useLoginDisplay();
  const [error, setError] = useState(null);
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
  });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
    setError('');
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const success = login(formData.email, formData.password);
    if (!success) {
      setError('Invalid email or password. Try demo@example.com / demo123');
    }
  };

  const getLayoutStyles = () => {
    switch (displayStyle) {
      case "image-side":
        return {
          wrapper: {
            minHeight: "100vh",
            display: "flex",
            backgroundColor: "#fff",
          },
          imageSection: {
            flex: 2,
            background: customImage 
              ? `url(${customImage})`
              : "url(https://source.unsplash.com/random/1600x900?workspace)",
            backgroundPosition: "left",
            backgroundSize: "cover",
            backgroundRepeat: "no-repeat",
            display: { xs: "none", md: "block" },
          },
          formSection: {
            flex: 1,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            p: 4,
          },
        };
      case "image-background":
        return {
          wrapper: {
            minHeight: "100vh",
            width: "100vw",
            display: "flex",
            background: customImage 
              ? `url(${customImage})`
              : "url(https://source.unsplash.com/random/1920x1080?workspace)",
            backgroundPosition: "center",
            backgroundSize: "cover",
            backgroundRepeat: "no-repeat",
            position: "relative",
            margin: -24, // Offset the default padding
            "&::before": {
              content: '""',
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: "rgba(0,0,0,0.5)",
            },
          },
          imageSection: {
            display: "none",
          },
          formSection: {
            flex: 1,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            p: 4,
            position: "relative",
            zIndex: 1,
            "& .MuiTypography-root": {
              color: "#fff",
            },
            "& .MuiTextField-root": {
              backgroundColor: "rgba(255,255,255,0.9)",
              borderRadius: 1,
            },
          },
        };
      default: // standard
        return {
          wrapper: {
            minHeight: "100vh",
            display: "flex",
            backgroundColor: "#f5f5f5",
          },
          imageSection: {
            display: "none",
          },
          formSection: {
            flex: 1,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            p: 4,
          },
        };
    }
  };

  const styles = getLayoutStyles();

  return (
    <Box sx={styles.wrapper}>
      <Box sx={styles.imageSection} />
      <Box sx={styles.formSection}>
        <Box sx={{ width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
          <Box display="flex" justifyContent="center" mb={4}>
            <LogoIcon />
          </Box>
          
          <Typography variant="h3" component="h1" gutterBottom align="center" sx={{ mb: 4 }}>
            Sign In
          </Typography>

          {error && (
            <Alert severity="error" sx={{ mb: 3, width: '80%' }}>
              {error}
            </Alert>
          )}

          <Box component="form" onSubmit={handleSubmit} sx={{ width: '80%' }}>
            <TextField
              margin="normal"
              required
              fullWidth
              id="email"
              label="Email Address"
              name="email"
              value={formData.email}
              onChange={handleChange}
              autoComplete="email"
              autoFocus
              sx={{ mb: 3 }}
            />
            <TextField
              margin="normal"
              required
              fullWidth
              name="password"
              label="Password"
              type={showPassword ? 'text' : 'password'}
              id="password"
              value={formData.password}
              onChange={handleChange}
              autoComplete="current-password"
              sx={{ mb: 4 }}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => setShowPassword(!showPassword)}
                      edge="end"
                    >
                      {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />

            <Stack spacing={2}>
              <FormGroup>
                <FormControlLabel
                  control={<Checkbox value="remember" color="primary" />}
                  label="Remember this device"
                />
              </FormGroup>

              <Button
                type="submit"
                fullWidth
                variant="contained"
                color="primary"
                size="large"
              >
                Sign In
              </Button>

              <Box sx={{ textAlign: "center" }}>
                <Typography variant="body2" color="textSecondary">
                  New to Flexy?{" "}
                  <Link to="/auth/signup">
                    Create an Account
                  </Link>
                </Typography>
              </Box>
            </Stack>
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

export default Login;
