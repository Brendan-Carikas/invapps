{"ast":null,"code":"// 获取节点的所有出/入路径的边集合\nexport var getInOutPathEdges = function (id, edges) {\n  var relativeInEdges = [];\n  var relativeOutEdges = [];\n  var queriedNodeIds = new Set([id]);\n  // 查询节点的一度入度边 + 出度边\n  var queryOneDegreeEdges = function (inNodeIds, outNodeIds) {\n    var inNodeIdSet = new Set();\n    var outNodeIdSet = new Set();\n    edges === null || edges === void 0 ? void 0 : edges.forEach(function (edge) {\n      // 查找入边\n      if (inNodeIds.has(edge.target)) {\n        relativeInEdges.push(edge);\n        if (!queriedNodeIds.has(edge.source)) {\n          inNodeIdSet.add(edge.source);\n        }\n      } else if (outNodeIds.has(edge.source)) {\n        // 查找出边\n        relativeOutEdges.push(edge);\n        if (!queriedNodeIds.has(edge.target)) {\n          outNodeIdSet.add(edge.target);\n        }\n      }\n    });\n    if (inNodeIdSet.size > 0 || outNodeIdSet.size > 0) {\n      queryOneDegreeEdges(inNodeIdSet, outNodeIdSet);\n    }\n  };\n  queryOneDegreeEdges(new Set([id]), new Set([id]));\n  return {\n    relativeInEdges: relativeInEdges,\n    relativeOutEdges: relativeOutEdges\n  };\n};","map":{"version":3,"names":["getInOutPathEdges","id","edges","relativeInEdges","relativeOutEdges","queriedNodeIds","Set","queryOneDegreeEdges","inNodeIds","outNodeIds","inNodeIdSet","outNodeIdSet","forEach","edge","has","target","push","source","add","size"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@ant-design/graphs/es/components/conversion-dagre-graph/utils/graph.js"],"sourcesContent":["// 获取节点的所有出/入路径的边集合\nexport var getInOutPathEdges = function (id, edges) {\n    var relativeInEdges = [];\n    var relativeOutEdges = [];\n    var queriedNodeIds = new Set([id]);\n    // 查询节点的一度入度边 + 出度边\n    var queryOneDegreeEdges = function (inNodeIds, outNodeIds) {\n        var inNodeIdSet = new Set();\n        var outNodeIdSet = new Set();\n        edges === null || edges === void 0 ? void 0 : edges.forEach(function (edge) {\n            // 查找入边\n            if (inNodeIds.has(edge.target)) {\n                relativeInEdges.push(edge);\n                if (!queriedNodeIds.has(edge.source)) {\n                    inNodeIdSet.add(edge.source);\n                }\n            }\n            else if (outNodeIds.has(edge.source)) {\n                // 查找出边\n                relativeOutEdges.push(edge);\n                if (!queriedNodeIds.has(edge.target)) {\n                    outNodeIdSet.add(edge.target);\n                }\n            }\n        });\n        if (inNodeIdSet.size > 0 || outNodeIdSet.size > 0) {\n            queryOneDegreeEdges(inNodeIdSet, outNodeIdSet);\n        }\n    };\n    queryOneDegreeEdges(new Set([id]), new Set([id]));\n    return {\n        relativeInEdges: relativeInEdges,\n        relativeOutEdges: relativeOutEdges,\n    };\n};\n"],"mappings":"AAAA;AACA,OAAO,IAAIA,iBAAiB,GAAG,SAAAA,CAAUC,EAAE,EAAEC,KAAK,EAAE;EAChD,IAAIC,eAAe,GAAG,EAAE;EACxB,IAAIC,gBAAgB,GAAG,EAAE;EACzB,IAAIC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAACL,EAAE,CAAC,CAAC;EAClC;EACA,IAAIM,mBAAmB,GAAG,SAAAA,CAAUC,SAAS,EAAEC,UAAU,EAAE;IACvD,IAAIC,WAAW,GAAG,IAAIJ,GAAG,CAAC,CAAC;IAC3B,IAAIK,YAAY,GAAG,IAAIL,GAAG,CAAC,CAAC;IAC5BJ,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACU,OAAO,CAAC,UAAUC,IAAI,EAAE;MACxE;MACA,IAAIL,SAAS,CAACM,GAAG,CAACD,IAAI,CAACE,MAAM,CAAC,EAAE;QAC5BZ,eAAe,CAACa,IAAI,CAACH,IAAI,CAAC;QAC1B,IAAI,CAACR,cAAc,CAACS,GAAG,CAACD,IAAI,CAACI,MAAM,CAAC,EAAE;UAClCP,WAAW,CAACQ,GAAG,CAACL,IAAI,CAACI,MAAM,CAAC;QAChC;MACJ,CAAC,MACI,IAAIR,UAAU,CAACK,GAAG,CAACD,IAAI,CAACI,MAAM,CAAC,EAAE;QAClC;QACAb,gBAAgB,CAACY,IAAI,CAACH,IAAI,CAAC;QAC3B,IAAI,CAACR,cAAc,CAACS,GAAG,CAACD,IAAI,CAACE,MAAM,CAAC,EAAE;UAClCJ,YAAY,CAACO,GAAG,CAACL,IAAI,CAACE,MAAM,CAAC;QACjC;MACJ;IACJ,CAAC,CAAC;IACF,IAAIL,WAAW,CAACS,IAAI,GAAG,CAAC,IAAIR,YAAY,CAACQ,IAAI,GAAG,CAAC,EAAE;MAC/CZ,mBAAmB,CAACG,WAAW,EAAEC,YAAY,CAAC;IAClD;EACJ,CAAC;EACDJ,mBAAmB,CAAC,IAAID,GAAG,CAAC,CAACL,EAAE,CAAC,CAAC,EAAE,IAAIK,GAAG,CAAC,CAACL,EAAE,CAAC,CAAC,CAAC;EACjD,OAAO;IACHE,eAAe,EAAEA,eAAe;IAChCC,gBAAgB,EAAEA;EACtB,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}