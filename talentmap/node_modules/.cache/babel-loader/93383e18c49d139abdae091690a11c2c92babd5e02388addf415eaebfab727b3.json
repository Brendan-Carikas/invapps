{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport G6 from '@antv/g6';\nimport { setItemState, paintOnce, resetBaseStates } from '../utils';\nimport { ITEM_STATE } from '../types';\nG6.registerBehavior('conv-click', {\n  getDefaultCfg: function () {\n    return {\n      multiple: false // 是否支持多选\n    };\n  },\n  getEvents: function () {\n    return {\n      'node:click': 'onNodeClick',\n      'canvas:click': 'onCanvasClick',\n      'edge:click': 'onEdgeClick'\n    };\n  },\n  handleNodeDetailInfoClick: function (event) {\n    var shape = event.target;\n    // click节点详情icon时emit事件，用于节点详情的弹窗的展示和隐藏\n    if (shape.get('name') === 'node-detail-info-icon') {\n      this.graph.emit('node:detailinfoclick', __assign(__assign({}, event), {\n        type: 'node:detailinfoclick',\n        name: 'node:detailinfoclick'\n      }));\n    } else {\n      this.graph.emit('node:otherareaclick', __assign(__assign({}, event), {\n        type: 'node:otherareaclick',\n        name: 'node:otherareaclick'\n      }));\n    }\n  },\n  onNodeClick: function (event) {\n    this.handleNodeDetailInfoClick(event);\n    var currentNode = event.item;\n    var graph = this.graph;\n    // 获取之前的选中状态\n    var isSelected = currentNode.hasState(ITEM_STATE.Selected);\n    paintOnce(graph, function () {\n      resetBaseStates(graph);\n      // 设置最新选中状态\n      setItemState(graph, currentNode, ITEM_STATE.Selected, !isSelected);\n      // 重绘节点相关的边，暂时不做\n      // refreshRelatedEdges(currentNode);\n    });\n  },\n  onEdgeClick: function (event) {\n    var currentEdge = event.item;\n    var graph = this.graph;\n    // 获取之前的选中状态\n    var isSelected = currentEdge.hasState(ITEM_STATE.Selected);\n    paintOnce(graph, function () {\n      resetBaseStates(graph);\n      // 设置最新选中状态\n      setItemState(graph, currentEdge, ITEM_STATE.Selected, !isSelected);\n    });\n  },\n  onCanvasClick: function () {\n    var graph = this.graph;\n    // 点击画布，重置元素状态为初始值\n    paintOnce(graph, function () {\n      resetBaseStates(graph);\n    });\n  }\n});","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","G6","setItemState","paintOnce","resetBaseStates","ITEM_STATE","registerBehavior","getDefaultCfg","multiple","getEvents","handleNodeDetailInfoClick","event","shape","target","get","graph","emit","type","name","onNodeClick","currentNode","item","isSelected","hasState","Selected","onEdgeClick","currentEdge","onCanvasClick"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@ant-design/graphs/es/components/conversion-dagre-graph/behaviors/custom-click.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport G6 from '@antv/g6';\nimport { setItemState, paintOnce, resetBaseStates } from '../utils';\nimport { ITEM_STATE } from '../types';\nG6.registerBehavior('conv-click', {\n    getDefaultCfg: function () {\n        return {\n            multiple: false, // 是否支持多选\n        };\n    },\n    getEvents: function () {\n        return {\n            'node:click': 'onNodeClick',\n            'canvas:click': 'onCanvasClick',\n            'edge:click': 'onEdgeClick',\n        };\n    },\n    handleNodeDetailInfoClick: function (event) {\n        var shape = event.target;\n        // click节点详情icon时emit事件，用于节点详情的弹窗的展示和隐藏\n        if (shape.get('name') === 'node-detail-info-icon') {\n            this.graph.emit('node:detailinfoclick', __assign(__assign({}, event), { type: 'node:detailinfoclick', name: 'node:detailinfoclick' }));\n        }\n        else {\n            this.graph.emit('node:otherareaclick', __assign(__assign({}, event), { type: 'node:otherareaclick', name: 'node:otherareaclick' }));\n        }\n    },\n    onNodeClick: function (event) {\n        this.handleNodeDetailInfoClick(event);\n        var currentNode = event.item;\n        var graph = this.graph;\n        // 获取之前的选中状态\n        var isSelected = currentNode.hasState(ITEM_STATE.Selected);\n        paintOnce(graph, function () {\n            resetBaseStates(graph);\n            // 设置最新选中状态\n            setItemState(graph, currentNode, ITEM_STATE.Selected, !isSelected);\n            // 重绘节点相关的边，暂时不做\n            // refreshRelatedEdges(currentNode);\n        });\n    },\n    onEdgeClick: function (event) {\n        var currentEdge = event.item;\n        var graph = this.graph;\n        // 获取之前的选中状态\n        var isSelected = currentEdge.hasState(ITEM_STATE.Selected);\n        paintOnce(graph, function () {\n            resetBaseStates(graph);\n            // 设置最新选中状态\n            setItemState(graph, currentEdge, ITEM_STATE.Selected, !isSelected);\n        });\n    },\n    onCanvasClick: function () {\n        var graph = this.graph;\n        // 点击画布，重置元素状态为初始值\n        paintOnce(graph, function () {\n            resetBaseStates(graph);\n        });\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}