{"ast":null,"code":"// 在画布上绘制层级名称\nexport var drawLayerName = function (graph, layerOrder, rankdir) {\n  var nodes = graph.getNodes().map(function (node) {\n    return node.getModel();\n  });\n  if (!graph || !Array.isArray(layerOrder) || !(layerOrder === null || layerOrder === void 0 ? void 0 : layerOrder.length)) {\n    return;\n  }\n  var group = graph.getGroup();\n  // 删除已有的层级名称容器分组\n  removeLayerNameGroup(graph);\n  // 添加层级名称容器的分组\n  var layerNameContainerGroup = group.addGroup({\n    id: 'layer-name-container-group'\n  });\n  // 过滤得到节点中实际存在的有效层级\n  var effectiveLayer = layerOrder.filter(function (layerName) {\n    return nodes.find(function (node) {\n      var _a;\n      return ((_a = node.custom) === null || _a === void 0 ? void 0 : _a.layerName) === layerName;\n    });\n  });\n  // 存储所有层级名称的x: 需遍历所有节点找出最左侧的节点的x, 实现层级名称纵向对齐\n  var minX = Infinity;\n  var minY = Infinity;\n  // 存储所有层级名称的x: 同层级节点x值的分布最多的值\n  var xInfo = [];\n  // 存储所有层级名称的y: 同层级节点y值的分布最多的值\n  var yInfo = [];\n  effectiveLayer.forEach(function (layerName) {\n    var countYInfo = {};\n    var countXInfo = {};\n    nodes.forEach(function (node) {\n      if (node.custom.layerName === layerName) {\n        // 找到所有节点中最左侧的节点的x坐标\n        if (node.x < minX) {\n          minX = node.x;\n        }\n        // 找到所有节点中最顶部的节点的y坐标\n        if (node.y < minY) {\n          minY = node.y;\n        }\n        var xKey = String(node.x);\n        var yKey = String(node.y);\n        // 记录所属同层级节点的x、y值分布（考虑节点拖动保存情况）\n        if (Object.keys(countXInfo).indexOf(String(xKey)) === -1) {\n          countXInfo[xKey] = 1;\n        } else {\n          countXInfo[xKey] += 1;\n        }\n        if (Object.keys(countYInfo).indexOf(String(yKey)) === -1) {\n          countYInfo[yKey] = 1;\n        } else {\n          countYInfo[yKey] += 1;\n        }\n      }\n    });\n    // 找出同层级节点中最多分布的x值（考虑节点拖动保存情况）\n    var xInfoKeys = Object.keys(countXInfo);\n    var mostX = xInfoKeys[0];\n    xInfoKeys.forEach(function (key) {\n      if (countXInfo[key] > countXInfo[mostX]) {\n        mostX = key;\n      }\n    });\n    xInfo.push(Number(mostX));\n    // 找出同层级节点中最多分布的y值（考虑节点拖动保存情况）\n    var yInfoKeys = Object.keys(countYInfo);\n    var mostY = yInfoKeys[0];\n    yInfoKeys.forEach(function (key) {\n      if (countYInfo[key] > countYInfo[mostY]) {\n        mostY = key;\n      }\n    });\n    yInfo.push(Number(mostY));\n  });\n  // 在画布中绘制有效层级\n  effectiveLayer.forEach(function (layerName, index) {\n    if (isNaN(xInfo[index]) || isNaN(yInfo[index])) {\n      return;\n    }\n    // 层级名称换行处理：先暂时处理每隔4个字符换行一次，待G6升级g-canvas 1.x以后使用wordWrap代替\n    var text = '';\n    var textArray = layerName.split('');\n    textArray.forEach(function (item, index) {\n      text += index > 0 && index < textArray.length - 1 && index % 4 === 3 ? \"\".concat(item, \"\\n\") : item;\n    });\n    // 添加层级名称的分组\n    var layerNameGroup = layerNameContainerGroup.addGroup({\n      id: \"layer-name-group-\".concat(index)\n    });\n    if (rankdir === 'TB') {\n      layerNameGroup.setMatrix([1, 0, 0, 0, 1, 0, minX - 102, yInfo[index], 1]);\n    } else {\n      layerNameGroup.setMatrix([1, 0, 0, 0, 1, 0, xInfo[index] + 32, minY - 102, 1]);\n    }\n    // 监听层级名称分组的拖动: 一期暂不支持，后续和节点拖动保存位置一起做\n    // layerNameGroup.on('drag', e => {\n    //   const { pointX, pointY } = e;\n    //   layerNameGroup.setMatrix([1, 0, 0, 0, 1, 0, pointX, pointY, 1]);\n    // });\n    // 向层级名称的分组中添加 层级名称图形\n    var layerNameShape = layerNameGroup.addShape('text', {\n      attrs: {\n        text: text,\n        x: 0,\n        y: 0,\n        fontFamily: 'PingFangSC',\n        fontSize: 16,\n        fontWeight: 400,\n        fill: 'rgb(3,34,98)',\n        opacity: 0.65,\n        lineHeight: 18,\n        textBaseline: 'top',\n        textAlign: 'center'\n        // wordWrap: true, // g-canvas 1.x以上版本才支持\n        // wordWrapWidth: 48,\n      },\n      name: \"layer-name-\".concat(layerName)\n      // draggable: true, // 一期暂不支持，后续和节点拖动保存位置一起做\n    });\n    var layerNameBbox = layerNameShape.getBBox();\n    // 向层级名称的分组中添加 层级名称背景图形\n    layerNameGroup.addShape('rect', {\n      attrs: {\n        x: -34,\n        y: -2,\n        width: 68,\n        height: (layerNameBbox === null || layerNameBbox === void 0 ? void 0 : layerNameBbox.height) + 4,\n        fill: '#B8C7E6',\n        opacity: 0.12\n      },\n      name: \"layer-name-\".concat(layerName)\n      // draggable: true, // 一期暂不支持，后续和节点拖动保存位置一起做\n    });\n    layerNameShape.toFront();\n  });\n};\n// 删除已有的层级名称分组\nexport var removeLayerNameGroup = function (graph) {\n  var group = graph.getGroup();\n  var layerNameGroup = group.findById('layer-name-container-group');\n  if (layerNameGroup) {\n    group.removeChild(layerNameGroup);\n  }\n};","map":{"version":3,"names":["drawLayerName","graph","layerOrder","rankdir","nodes","getNodes","map","node","getModel","Array","isArray","length","group","getGroup","removeLayerNameGroup","layerNameContainerGroup","addGroup","id","effectiveLayer","filter","layerName","find","_a","custom","minX","Infinity","minY","xInfo","yInfo","forEach","countYInfo","countXInfo","x","y","xKey","String","yKey","Object","keys","indexOf","xInfoKeys","mostX","key","push","Number","yInfoKeys","mostY","index","isNaN","text","textArray","split","item","concat","layerNameGroup","setMatrix","layerNameShape","addShape","attrs","fontFamily","fontSize","fontWeight","fill","opacity","lineHeight","textBaseline","textAlign","name","layerNameBbox","getBBox","width","height","toFront","findById","removeChild"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@ant-design/graphs/es/components/conversion-dagre-graph/utils/layer.js"],"sourcesContent":["// 在画布上绘制层级名称\nexport var drawLayerName = function (graph, layerOrder, rankdir) {\n    var nodes = graph.getNodes().map(function (node) { return node.getModel(); });\n    if (!graph || !Array.isArray(layerOrder) || !(layerOrder === null || layerOrder === void 0 ? void 0 : layerOrder.length)) {\n        return;\n    }\n    var group = graph.getGroup();\n    // 删除已有的层级名称容器分组\n    removeLayerNameGroup(graph);\n    // 添加层级名称容器的分组\n    var layerNameContainerGroup = group.addGroup({ id: 'layer-name-container-group' });\n    // 过滤得到节点中实际存在的有效层级\n    var effectiveLayer = layerOrder.filter(function (layerName) {\n        return nodes.find(function (node) { var _a; return ((_a = node.custom) === null || _a === void 0 ? void 0 : _a.layerName) === layerName; });\n    });\n    // 存储所有层级名称的x: 需遍历所有节点找出最左侧的节点的x, 实现层级名称纵向对齐\n    var minX = Infinity;\n    var minY = Infinity;\n    // 存储所有层级名称的x: 同层级节点x值的分布最多的值\n    var xInfo = [];\n    // 存储所有层级名称的y: 同层级节点y值的分布最多的值\n    var yInfo = [];\n    effectiveLayer.forEach(function (layerName) {\n        var countYInfo = {};\n        var countXInfo = {};\n        nodes.forEach(function (node) {\n            if (node.custom.layerName === layerName) {\n                // 找到所有节点中最左侧的节点的x坐标\n                if (node.x < minX) {\n                    minX = node.x;\n                }\n                // 找到所有节点中最顶部的节点的y坐标\n                if (node.y < minY) {\n                    minY = node.y;\n                }\n                var xKey = String(node.x);\n                var yKey = String(node.y);\n                // 记录所属同层级节点的x、y值分布（考虑节点拖动保存情况）\n                if (Object.keys(countXInfo).indexOf(String(xKey)) === -1) {\n                    countXInfo[xKey] = 1;\n                }\n                else {\n                    countXInfo[xKey] += 1;\n                }\n                if (Object.keys(countYInfo).indexOf(String(yKey)) === -1) {\n                    countYInfo[yKey] = 1;\n                }\n                else {\n                    countYInfo[yKey] += 1;\n                }\n            }\n        });\n        // 找出同层级节点中最多分布的x值（考虑节点拖动保存情况）\n        var xInfoKeys = Object.keys(countXInfo);\n        var mostX = xInfoKeys[0];\n        xInfoKeys.forEach(function (key) {\n            if (countXInfo[key] > countXInfo[mostX]) {\n                mostX = key;\n            }\n        });\n        xInfo.push(Number(mostX));\n        // 找出同层级节点中最多分布的y值（考虑节点拖动保存情况）\n        var yInfoKeys = Object.keys(countYInfo);\n        var mostY = yInfoKeys[0];\n        yInfoKeys.forEach(function (key) {\n            if (countYInfo[key] > countYInfo[mostY]) {\n                mostY = key;\n            }\n        });\n        yInfo.push(Number(mostY));\n    });\n    // 在画布中绘制有效层级\n    effectiveLayer.forEach(function (layerName, index) {\n        if (isNaN(xInfo[index]) || isNaN(yInfo[index])) {\n            return;\n        }\n        // 层级名称换行处理：先暂时处理每隔4个字符换行一次，待G6升级g-canvas 1.x以后使用wordWrap代替\n        var text = '';\n        var textArray = layerName.split('');\n        textArray.forEach(function (item, index) {\n            text += index > 0 && index < textArray.length - 1 && index % 4 === 3 ? \"\".concat(item, \"\\n\") : item;\n        });\n        // 添加层级名称的分组\n        var layerNameGroup = layerNameContainerGroup.addGroup({ id: \"layer-name-group-\".concat(index) });\n        if (rankdir === 'TB') {\n            layerNameGroup.setMatrix([1, 0, 0, 0, 1, 0, minX - 102, yInfo[index], 1]);\n        }\n        else {\n            layerNameGroup.setMatrix([1, 0, 0, 0, 1, 0, xInfo[index] + 32, minY - 102, 1]);\n        }\n        // 监听层级名称分组的拖动: 一期暂不支持，后续和节点拖动保存位置一起做\n        // layerNameGroup.on('drag', e => {\n        //   const { pointX, pointY } = e;\n        //   layerNameGroup.setMatrix([1, 0, 0, 0, 1, 0, pointX, pointY, 1]);\n        // });\n        // 向层级名称的分组中添加 层级名称图形\n        var layerNameShape = layerNameGroup.addShape('text', {\n            attrs: {\n                text: text,\n                x: 0,\n                y: 0,\n                fontFamily: 'PingFangSC',\n                fontSize: 16,\n                fontWeight: 400,\n                fill: 'rgb(3,34,98)',\n                opacity: 0.65,\n                lineHeight: 18,\n                textBaseline: 'top',\n                textAlign: 'center',\n                // wordWrap: true, // g-canvas 1.x以上版本才支持\n                // wordWrapWidth: 48,\n            },\n            name: \"layer-name-\".concat(layerName),\n            // draggable: true, // 一期暂不支持，后续和节点拖动保存位置一起做\n        });\n        var layerNameBbox = layerNameShape.getBBox();\n        // 向层级名称的分组中添加 层级名称背景图形\n        layerNameGroup.addShape('rect', {\n            attrs: {\n                x: -34,\n                y: -2,\n                width: 68,\n                height: (layerNameBbox === null || layerNameBbox === void 0 ? void 0 : layerNameBbox.height) + 4,\n                fill: '#B8C7E6',\n                opacity: 0.12,\n            },\n            name: \"layer-name-\".concat(layerName),\n            // draggable: true, // 一期暂不支持，后续和节点拖动保存位置一起做\n        });\n        layerNameShape.toFront();\n    });\n};\n// 删除已有的层级名称分组\nexport var removeLayerNameGroup = function (graph) {\n    var group = graph.getGroup();\n    var layerNameGroup = group.findById('layer-name-container-group');\n    if (layerNameGroup) {\n        group.removeChild(layerNameGroup);\n    }\n};\n"],"mappings":"AAAA;AACA,OAAO,IAAIA,aAAa,GAAG,SAAAA,CAAUC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAC7D,IAAIC,KAAK,GAAGH,KAAK,CAACI,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;IAAE,OAAOA,IAAI,CAACC,QAAQ,CAAC,CAAC;EAAE,CAAC,CAAC;EAC7E,IAAI,CAACP,KAAK,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACR,UAAU,CAAC,IAAI,EAAEA,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACS,MAAM,CAAC,EAAE;IACtH;EACJ;EACA,IAAIC,KAAK,GAAGX,KAAK,CAACY,QAAQ,CAAC,CAAC;EAC5B;EACAC,oBAAoB,CAACb,KAAK,CAAC;EAC3B;EACA,IAAIc,uBAAuB,GAAGH,KAAK,CAACI,QAAQ,CAAC;IAAEC,EAAE,EAAE;EAA6B,CAAC,CAAC;EAClF;EACA,IAAIC,cAAc,GAAGhB,UAAU,CAACiB,MAAM,CAAC,UAAUC,SAAS,EAAE;IACxD,OAAOhB,KAAK,CAACiB,IAAI,CAAC,UAAUd,IAAI,EAAE;MAAE,IAAIe,EAAE;MAAE,OAAO,CAAC,CAACA,EAAE,GAAGf,IAAI,CAACgB,MAAM,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACF,SAAS,MAAMA,SAAS;IAAE,CAAC,CAAC;EAC/I,CAAC,CAAC;EACF;EACA,IAAII,IAAI,GAAGC,QAAQ;EACnB,IAAIC,IAAI,GAAGD,QAAQ;EACnB;EACA,IAAIE,KAAK,GAAG,EAAE;EACd;EACA,IAAIC,KAAK,GAAG,EAAE;EACdV,cAAc,CAACW,OAAO,CAAC,UAAUT,SAAS,EAAE;IACxC,IAAIU,UAAU,GAAG,CAAC,CAAC;IACnB,IAAIC,UAAU,GAAG,CAAC,CAAC;IACnB3B,KAAK,CAACyB,OAAO,CAAC,UAAUtB,IAAI,EAAE;MAC1B,IAAIA,IAAI,CAACgB,MAAM,CAACH,SAAS,KAAKA,SAAS,EAAE;QACrC;QACA,IAAIb,IAAI,CAACyB,CAAC,GAAGR,IAAI,EAAE;UACfA,IAAI,GAAGjB,IAAI,CAACyB,CAAC;QACjB;QACA;QACA,IAAIzB,IAAI,CAAC0B,CAAC,GAAGP,IAAI,EAAE;UACfA,IAAI,GAAGnB,IAAI,CAAC0B,CAAC;QACjB;QACA,IAAIC,IAAI,GAAGC,MAAM,CAAC5B,IAAI,CAACyB,CAAC,CAAC;QACzB,IAAII,IAAI,GAAGD,MAAM,CAAC5B,IAAI,CAAC0B,CAAC,CAAC;QACzB;QACA,IAAII,MAAM,CAACC,IAAI,CAACP,UAAU,CAAC,CAACQ,OAAO,CAACJ,MAAM,CAACD,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;UACtDH,UAAU,CAACG,IAAI,CAAC,GAAG,CAAC;QACxB,CAAC,MACI;UACDH,UAAU,CAACG,IAAI,CAAC,IAAI,CAAC;QACzB;QACA,IAAIG,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC,CAACS,OAAO,CAACJ,MAAM,CAACC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;UACtDN,UAAU,CAACM,IAAI,CAAC,GAAG,CAAC;QACxB,CAAC,MACI;UACDN,UAAU,CAACM,IAAI,CAAC,IAAI,CAAC;QACzB;MACJ;IACJ,CAAC,CAAC;IACF;IACA,IAAII,SAAS,GAAGH,MAAM,CAACC,IAAI,CAACP,UAAU,CAAC;IACvC,IAAIU,KAAK,GAAGD,SAAS,CAAC,CAAC,CAAC;IACxBA,SAAS,CAACX,OAAO,CAAC,UAAUa,GAAG,EAAE;MAC7B,IAAIX,UAAU,CAACW,GAAG,CAAC,GAAGX,UAAU,CAACU,KAAK,CAAC,EAAE;QACrCA,KAAK,GAAGC,GAAG;MACf;IACJ,CAAC,CAAC;IACFf,KAAK,CAACgB,IAAI,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC;IACzB;IACA,IAAII,SAAS,GAAGR,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC;IACvC,IAAIgB,KAAK,GAAGD,SAAS,CAAC,CAAC,CAAC;IACxBA,SAAS,CAAChB,OAAO,CAAC,UAAUa,GAAG,EAAE;MAC7B,IAAIZ,UAAU,CAACY,GAAG,CAAC,GAAGZ,UAAU,CAACgB,KAAK,CAAC,EAAE;QACrCA,KAAK,GAAGJ,GAAG;MACf;IACJ,CAAC,CAAC;IACFd,KAAK,CAACe,IAAI,CAACC,MAAM,CAACE,KAAK,CAAC,CAAC;EAC7B,CAAC,CAAC;EACF;EACA5B,cAAc,CAACW,OAAO,CAAC,UAAUT,SAAS,EAAE2B,KAAK,EAAE;IAC/C,IAAIC,KAAK,CAACrB,KAAK,CAACoB,KAAK,CAAC,CAAC,IAAIC,KAAK,CAACpB,KAAK,CAACmB,KAAK,CAAC,CAAC,EAAE;MAC5C;IACJ;IACA;IACA,IAAIE,IAAI,GAAG,EAAE;IACb,IAAIC,SAAS,GAAG9B,SAAS,CAAC+B,KAAK,CAAC,EAAE,CAAC;IACnCD,SAAS,CAACrB,OAAO,CAAC,UAAUuB,IAAI,EAAEL,KAAK,EAAE;MACrCE,IAAI,IAAIF,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGG,SAAS,CAACvC,MAAM,GAAG,CAAC,IAAIoC,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAACM,MAAM,CAACD,IAAI,EAAE,IAAI,CAAC,GAAGA,IAAI;IACvG,CAAC,CAAC;IACF;IACA,IAAIE,cAAc,GAAGvC,uBAAuB,CAACC,QAAQ,CAAC;MAAEC,EAAE,EAAE,mBAAmB,CAACoC,MAAM,CAACN,KAAK;IAAE,CAAC,CAAC;IAChG,IAAI5C,OAAO,KAAK,IAAI,EAAE;MAClBmD,cAAc,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE/B,IAAI,GAAG,GAAG,EAAEI,KAAK,CAACmB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7E,CAAC,MACI;MACDO,cAAc,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE5B,KAAK,CAACoB,KAAK,CAAC,GAAG,EAAE,EAAErB,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;IAClF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI8B,cAAc,GAAGF,cAAc,CAACG,QAAQ,CAAC,MAAM,EAAE;MACjDC,KAAK,EAAE;QACHT,IAAI,EAAEA,IAAI;QACVjB,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE,CAAC;QACJ0B,UAAU,EAAE,YAAY;QACxBC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,GAAG;QACfC,IAAI,EAAE,cAAc;QACpBC,OAAO,EAAE,IAAI;QACbC,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,KAAK;QACnBC,SAAS,EAAE;QACX;QACA;MACJ,CAAC;MACDC,IAAI,EAAE,aAAa,CAACd,MAAM,CAACjC,SAAS;MACpC;IACJ,CAAC,CAAC;IACF,IAAIgD,aAAa,GAAGZ,cAAc,CAACa,OAAO,CAAC,CAAC;IAC5C;IACAf,cAAc,CAACG,QAAQ,CAAC,MAAM,EAAE;MAC5BC,KAAK,EAAE;QACH1B,CAAC,EAAE,CAAC,EAAE;QACNC,CAAC,EAAE,CAAC,CAAC;QACLqC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,CAACH,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACG,MAAM,IAAI,CAAC;QAChGT,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;MACb,CAAC;MACDI,IAAI,EAAE,aAAa,CAACd,MAAM,CAACjC,SAAS;MACpC;IACJ,CAAC,CAAC;IACFoC,cAAc,CAACgB,OAAO,CAAC,CAAC;EAC5B,CAAC,CAAC;AACN,CAAC;AACD;AACA,OAAO,IAAI1D,oBAAoB,GAAG,SAAAA,CAAUb,KAAK,EAAE;EAC/C,IAAIW,KAAK,GAAGX,KAAK,CAACY,QAAQ,CAAC,CAAC;EAC5B,IAAIyC,cAAc,GAAG1C,KAAK,CAAC6D,QAAQ,CAAC,4BAA4B,CAAC;EACjE,IAAInB,cAAc,EAAE;IAChB1C,KAAK,CAAC8D,WAAW,CAACpB,cAAc,CAAC;EACrC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}