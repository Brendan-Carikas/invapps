{"ast":null,"code":"export const parseSkillsCSV = async () => {\n  try {\n    const response = await fetch('/data/skills.csv');\n    const csvText = await response.text();\n\n    // Split the CSV into lines and remove the header\n    const lines = csvText.split('\\n');\n    const [header, ...dataRows] = lines;\n    return dataRows.filter(row => row.trim() !== '').map(row => {\n      const [id, name, category] = row.split(',');\n      return {\n        id: id.trim(),\n        name: name.trim(),\n        category: category.trim()\n      };\n    });\n  } catch (error) {\n    console.error('Error parsing skills CSV:', error);\n    return [];\n  }\n};\nexport const getSkillsByCategory = (skills, category) => {\n  return skills.filter(skill => skill.category === category);\n};\nexport const getAllCategories = skills => {\n  return Array.from(new Set(skills.map(skill => skill.category)));\n};","map":{"version":3,"names":["parseSkillsCSV","response","fetch","csvText","text","lines","split","header","dataRows","filter","row","trim","map","id","name","category","error","console","getSkillsByCategory","skills","skill","getAllCategories","Array","from","Set"],"sources":["/Users/invotradesign/MYGitHub/CascadeProjects/site-users-app/src/utils/skillsUtils.ts"],"sourcesContent":["import { Skill } from '../types/User';\n\nexport interface SkillCSV {\n  id: string;\n  name: string;\n  category: string;\n}\n\nexport const parseSkillsCSV = async (): Promise<SkillCSV[]> => {\n  try {\n    const response = await fetch('/data/skills.csv');\n    const csvText = await response.text();\n    \n    // Split the CSV into lines and remove the header\n    const lines = csvText.split('\\n');\n    const [header, ...dataRows] = lines;\n    \n    return dataRows\n      .filter((row: string) => row.trim() !== '')\n      .map((row: string) => {\n        const [id, name, category] = row.split(',');\n        return {\n          id: id.trim(),\n          name: name.trim(),\n          category: category.trim()\n        };\n      });\n  } catch (error) {\n    console.error('Error parsing skills CSV:', error);\n    return [];\n  }\n};\n\nexport const getSkillsByCategory = (skills: SkillCSV[], category: string): SkillCSV[] => {\n  return skills.filter(skill => skill.category === category);\n};\n\nexport const getAllCategories = (skills: SkillCSV[]): string[] => {\n  return Array.from(new Set(skills.map(skill => skill.category)));\n};"],"mappings":"AAQA,OAAO,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAiC;EAC7D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,CAAC;IAChD,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAErC;IACA,MAAMC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,IAAI,CAAC;IACjC,MAAM,CAACC,MAAM,EAAE,GAAGC,QAAQ,CAAC,GAAGH,KAAK;IAEnC,OAAOG,QAAQ,CACZC,MAAM,CAAEC,GAAW,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAC1CC,GAAG,CAAEF,GAAW,IAAK;MACpB,MAAM,CAACG,EAAE,EAAEC,IAAI,EAAEC,QAAQ,CAAC,GAAGL,GAAG,CAACJ,KAAK,CAAC,GAAG,CAAC;MAC3C,OAAO;QACLO,EAAE,EAAEA,EAAE,CAACF,IAAI,CAAC,CAAC;QACbG,IAAI,EAAEA,IAAI,CAACH,IAAI,CAAC,CAAC;QACjBI,QAAQ,EAAEA,QAAQ,CAACJ,IAAI,CAAC;MAC1B,CAAC;IACH,CAAC,CAAC;EACN,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAGA,CAACC,MAAkB,EAAEJ,QAAgB,KAAiB;EACvF,OAAOI,MAAM,CAACV,MAAM,CAACW,KAAK,IAAIA,KAAK,CAACL,QAAQ,KAAKA,QAAQ,CAAC;AAC5D,CAAC;AAED,OAAO,MAAMM,gBAAgB,GAAIF,MAAkB,IAAe;EAChE,OAAOG,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACL,MAAM,CAACP,GAAG,CAACQ,KAAK,IAAIA,KAAK,CAACL,QAAQ,CAAC,CAAC,CAAC;AACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}