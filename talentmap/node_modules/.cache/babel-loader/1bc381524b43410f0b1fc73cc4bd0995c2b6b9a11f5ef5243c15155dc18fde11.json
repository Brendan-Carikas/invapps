{"ast":null,"code":"var _jsxFileName = \"/Users/invotradesign/CascadeProjects/site-users-app/src/components/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/ThemeContext.tsx\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst THEME_STORAGE_KEY = 'app-theme-settings';\n\n// Default theme settings\nconst defaultSettings = {\n  mode: 'light',\n  primaryColor: '#1976d2',\n  secondaryColor: '#dc004e',\n  headingFont: 'Roboto',\n  bodyFont: 'Roboto',\n  headingFontWeights: {\n    h1: 700,\n    h2: 600,\n    h3: 600,\n    h4: 500,\n    h5: 500,\n    h6: 500\n  }\n};\nexport const ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Load saved settings from localStorage or use defaults\n  const loadSavedSettings = () => {\n    const savedSettings = localStorage.getItem(THEME_STORAGE_KEY);\n    return savedSettings ? JSON.parse(savedSettings) : defaultSettings;\n  };\n  const [mode, setMode] = useState(loadSavedSettings().mode);\n  const [primaryColor, setPrimaryColor] = useState(loadSavedSettings().primaryColor);\n  const [secondaryColor, setSecondaryColor] = useState(loadSavedSettings().secondaryColor);\n  const [headingFont, setHeadingFont] = useState(loadSavedSettings().headingFont);\n  const [bodyFont, setBodyFont] = useState(loadSavedSettings().bodyFont);\n  const [headingFontWeights, setHeadingFontWeights] = useState(loadSavedSettings().headingFontWeights);\n\n  // Save settings to localStorage\n  const saveSettings = () => {\n    const settings = {\n      mode,\n      primaryColor,\n      secondaryColor,\n      headingFont,\n      bodyFont,\n      headingFontWeights\n    };\n    localStorage.setItem(THEME_STORAGE_KEY, JSON.stringify(settings));\n  };\n  const resetToDefaults = () => {\n    setMode(defaultSettings.mode);\n    setPrimaryColor(defaultSettings.primaryColor);\n    setSecondaryColor(defaultSettings.secondaryColor);\n    setHeadingFont(defaultSettings.headingFont);\n    setBodyFont(defaultSettings.bodyFont);\n    setHeadingFontWeights(defaultSettings.headingFontWeights);\n  };\n\n  // Auto-save settings when they change\n  useEffect(() => {\n    saveSettings();\n  }, [mode, primaryColor, secondaryColor, headingFont, bodyFont, headingFontWeights]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode,\n      setMode,\n      primaryColor,\n      setPrimaryColor,\n      secondaryColor,\n      setSecondaryColor,\n      headingFont,\n      setHeadingFont,\n      bodyFont,\n      setBodyFont,\n      headingFontWeights,\n      setHeadingFontWeights,\n      saveSettings,\n      resetToDefaults\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"roy+x0JiEp5d13ggjhVIScNtJHQ=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","THEME_STORAGE_KEY","defaultSettings","mode","primaryColor","secondaryColor","headingFont","bodyFont","headingFontWeights","h1","h2","h3","h4","h5","h6","ThemeContext","undefined","useTheme","_s","context","Error","ThemeProvider","children","_s2","loadSavedSettings","savedSettings","localStorage","getItem","JSON","parse","setMode","setPrimaryColor","setSecondaryColor","setHeadingFont","setBodyFont","setHeadingFontWeights","saveSettings","settings","setItem","stringify","resetToDefaults","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/src/components/ThemeContext.tsx"],"sourcesContent":["// src/contexts/ThemeContext.tsx\nimport { createContext, useContext, useState, ReactNode, useEffect } from 'react';\n\ninterface ThemeContextType {\n  mode: 'light' | 'dark';\n  setMode: (mode: 'light' | 'dark') => void;\n  primaryColor: string;\n  setPrimaryColor: (color: string) => void;\n  secondaryColor: string;\n  setSecondaryColor: (color: string) => void;\n  headingFont: string;\n  setHeadingFont: (font: string) => void;\n  bodyFont: string;\n  setBodyFont: (font: string) => void;\n  headingFontWeights: { [key: string]: number };\n  setHeadingFontWeights: (weights: { [key: string]: number }) => void;\n  saveSettings: () => void;\n  resetToDefaults: () => void;\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst THEME_STORAGE_KEY = 'app-theme-settings';\n\n// Default theme settings\nconst defaultSettings: {\n  mode: 'light' | 'dark';\n  primaryColor: string;\n  secondaryColor: string;\n  headingFont: string;\n  bodyFont: string;\n  headingFontWeights: { [key: string]: number };\n} = {\n  mode: 'light',\n  primaryColor: '#1976d2',\n  secondaryColor: '#dc004e',\n  headingFont: 'Roboto',\n  bodyFont: 'Roboto',\n  headingFontWeights: {\n    h1: 700,\n    h2: 600,\n    h3: 600,\n    h4: 500,\n    h5: 500,\n    h6: 500\n  }\n};\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  // Load saved settings from localStorage or use defaults\n  const loadSavedSettings = () => {\n    const savedSettings = localStorage.getItem(THEME_STORAGE_KEY);\n    return savedSettings ? JSON.parse(savedSettings) : defaultSettings;\n  };\n\n  const [mode, setMode] = useState<'light' | 'dark'>(loadSavedSettings().mode);\n  const [primaryColor, setPrimaryColor] = useState(loadSavedSettings().primaryColor);\n  const [secondaryColor, setSecondaryColor] = useState(loadSavedSettings().secondaryColor);\n  const [headingFont, setHeadingFont] = useState(loadSavedSettings().headingFont);\n  const [bodyFont, setBodyFont] = useState(loadSavedSettings().bodyFont);\n  const [headingFontWeights, setHeadingFontWeights] = useState(loadSavedSettings().headingFontWeights);\n\n  // Save settings to localStorage\n  const saveSettings = () => {\n    const settings = {\n      mode,\n      primaryColor,\n      secondaryColor,\n      headingFont,\n      bodyFont,\n      headingFontWeights,\n    };\n    localStorage.setItem(THEME_STORAGE_KEY, JSON.stringify(settings));\n  };\n\n  const resetToDefaults = () => {\n    setMode(defaultSettings.mode);\n    setPrimaryColor(defaultSettings.primaryColor);\n    setSecondaryColor(defaultSettings.secondaryColor);\n    setHeadingFont(defaultSettings.headingFont);\n    setBodyFont(defaultSettings.bodyFont);\n    setHeadingFontWeights(defaultSettings.headingFontWeights);\n  };\n\n  // Auto-save settings when they change\n  useEffect(() => {\n    saveSettings();\n  }, [mode, primaryColor, secondaryColor, headingFont, bodyFont, headingFontWeights]);\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        mode,\n        setMode,\n        primaryColor,\n        setPrimaryColor,\n        secondaryColor,\n        setSecondaryColor,\n        headingFont,\n        setHeadingFont,\n        bodyFont,\n        setBodyFont,\n        headingFontWeights,\n        setHeadingFontWeights,\n        saveSettings,\n        resetToDefaults,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}