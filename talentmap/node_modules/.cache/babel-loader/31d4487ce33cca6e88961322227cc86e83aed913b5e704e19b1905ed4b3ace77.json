{"ast":null,"code":"import { EdgeType } from '../types';\n// 获取边的类型，起点和终点的anchorPoint索引值\nexport var getEdgeAnchorAndType = function (graph, edge, layerOrder, rankdir) {\n  var nodes = graph.getNodes().map(function (node) {\n    return node.getModel();\n  });\n  var sourceNode = nodes.find(function (node) {\n    return node.id === edge.source;\n  });\n  var targetNode = nodes.find(function (node) {\n    return node.id === edge.target;\n  });\n  var sourceLayer = layerOrder.findIndex(function (item) {\n    var _a;\n    return item === ((_a = sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.custom) === null || _a === void 0 ? void 0 : _a.layerName);\n  });\n  var targetLayer = layerOrder.findIndex(function (item) {\n    var _a;\n    return item === ((_a = targetNode === null || targetNode === void 0 ? void 0 : targetNode.custom) === null || _a === void 0 ? void 0 : _a.layerName);\n  });\n  var sourceAnchor;\n  var targetAnchor;\n  var type;\n  // 同层级节点之间的边，\n  if (sourceLayer !== -1 && sourceLayer === targetLayer) {\n    type = EdgeType.CONV_LINE;\n    // 起始点的连接点根据起始点的位置顺序来\n    if (rankdir === 'LR') {\n      sourceAnchor = sourceNode.y < targetNode.y ? 1 : 0;\n      targetAnchor = sourceNode.y < targetNode.y ? 0 : 1;\n    } else {\n      sourceAnchor = sourceNode.x < targetNode.x ? 3 : 2;\n      targetAnchor = sourceNode.x < targetNode.x ? 2 : 3;\n    }\n  } else {\n    if (rankdir === 'LR') {\n      type = EdgeType.CONV_CUBIC_HORIZONTAL;\n      sourceAnchor = sourceNode.x < targetNode.x ? 3 : 2;\n      targetAnchor = sourceNode.x < targetNode.x ? 2 : 3;\n    } else {\n      type = EdgeType.CONV_CUBIC_VERTICAL;\n      sourceAnchor = sourceNode.y < targetNode.y ? 1 : 0;\n      targetAnchor = sourceNode.y < targetNode.y ? 0 : 1;\n    }\n  }\n  return {\n    type: type,\n    sourceAnchor: sourceAnchor,\n    targetAnchor: targetAnchor\n  };\n};\n// 更新边对应的类型、起点和终点的连接点\nexport var updateEdgeAnchorAndType = function (graph, layerOrder, rankdir) {\n  graph.getEdges().forEach(function (edge) {\n    var edgeModel = edge.getModel();\n    var _a = getEdgeAnchorAndType(graph, edgeModel, layerOrder, rankdir),\n      type = _a.type,\n      sourceAnchor = _a.sourceAnchor,\n      targetAnchor = _a.targetAnchor;\n    graph.updateItem(edgeModel.id, {\n      type: type,\n      sourceAnchor: sourceAnchor,\n      targetAnchor: targetAnchor\n    });\n  });\n};\n// 获取自定义箭头\nexport var getArrowConfig = function (color) {\n  if (color === void 0) {\n    color = '#B8C3D9';\n  }\n  return {\n    path: 'M 14,-4 C 14,-4,11,0,14,4 L 4,0 L 14,-4 Z',\n    d: 2,\n    fill: color,\n    stroke: color,\n    lineWidth: 1,\n    lineDash: []\n  };\n};","map":{"version":3,"names":["EdgeType","getEdgeAnchorAndType","graph","edge","layerOrder","rankdir","nodes","getNodes","map","node","getModel","sourceNode","find","id","source","targetNode","target","sourceLayer","findIndex","item","_a","custom","layerName","targetLayer","sourceAnchor","targetAnchor","type","CONV_LINE","y","x","CONV_CUBIC_HORIZONTAL","CONV_CUBIC_VERTICAL","updateEdgeAnchorAndType","getEdges","forEach","edgeModel","updateItem","getArrowConfig","color","path","d","fill","stroke","lineWidth","lineDash"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@ant-design/graphs/es/components/conversion-dagre-graph/utils/edge.js"],"sourcesContent":["import { EdgeType } from '../types';\n// 获取边的类型，起点和终点的anchorPoint索引值\nexport var getEdgeAnchorAndType = function (graph, edge, layerOrder, rankdir) {\n    var nodes = graph.getNodes().map(function (node) { return node.getModel(); });\n    var sourceNode = nodes.find(function (node) { return node.id === edge.source; });\n    var targetNode = nodes.find(function (node) { return node.id === edge.target; });\n    var sourceLayer = layerOrder.findIndex(function (item) { var _a; return item === ((_a = sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.custom) === null || _a === void 0 ? void 0 : _a.layerName); });\n    var targetLayer = layerOrder.findIndex(function (item) { var _a; return item === ((_a = targetNode === null || targetNode === void 0 ? void 0 : targetNode.custom) === null || _a === void 0 ? void 0 : _a.layerName); });\n    var sourceAnchor;\n    var targetAnchor;\n    var type;\n    // 同层级节点之间的边，\n    if (sourceLayer !== -1 && sourceLayer === targetLayer) {\n        type = EdgeType.CONV_LINE;\n        // 起始点的连接点根据起始点的位置顺序来\n        if (rankdir === 'LR') {\n            sourceAnchor = sourceNode.y < targetNode.y ? 1 : 0;\n            targetAnchor = sourceNode.y < targetNode.y ? 0 : 1;\n        }\n        else {\n            sourceAnchor = sourceNode.x < targetNode.x ? 3 : 2;\n            targetAnchor = sourceNode.x < targetNode.x ? 2 : 3;\n        }\n    }\n    else {\n        if (rankdir === 'LR') {\n            type = EdgeType.CONV_CUBIC_HORIZONTAL;\n            sourceAnchor = sourceNode.x < targetNode.x ? 3 : 2;\n            targetAnchor = sourceNode.x < targetNode.x ? 2 : 3;\n        }\n        else {\n            type = EdgeType.CONV_CUBIC_VERTICAL;\n            sourceAnchor = sourceNode.y < targetNode.y ? 1 : 0;\n            targetAnchor = sourceNode.y < targetNode.y ? 0 : 1;\n        }\n    }\n    return {\n        type: type,\n        sourceAnchor: sourceAnchor,\n        targetAnchor: targetAnchor,\n    };\n};\n// 更新边对应的类型、起点和终点的连接点\nexport var updateEdgeAnchorAndType = function (graph, layerOrder, rankdir) {\n    graph.getEdges().forEach(function (edge) {\n        var edgeModel = edge.getModel();\n        var _a = getEdgeAnchorAndType(graph, edgeModel, layerOrder, rankdir), type = _a.type, sourceAnchor = _a.sourceAnchor, targetAnchor = _a.targetAnchor;\n        graph.updateItem(edgeModel.id, {\n            type: type,\n            sourceAnchor: sourceAnchor,\n            targetAnchor: targetAnchor,\n        });\n    });\n};\n// 获取自定义箭头\nexport var getArrowConfig = function (color) {\n    if (color === void 0) { color = '#B8C3D9'; }\n    return {\n        path: 'M 14,-4 C 14,-4,11,0,14,4 L 4,0 L 14,-4 Z',\n        d: 2,\n        fill: color,\n        stroke: color,\n        lineWidth: 1,\n        lineDash: [],\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}