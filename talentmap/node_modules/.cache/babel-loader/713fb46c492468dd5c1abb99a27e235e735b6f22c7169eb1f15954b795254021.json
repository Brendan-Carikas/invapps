{"ast":null,"code":"var _jsxFileName = \"/Users/invotradesign/CascadeProjects/site-users-app/src/components/OrgChart.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Organization } from '@ant-design/plots';\nimport { Box, Typography, Card, CardContent, useTheme } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Mock data with hierarchy\nconst mockUsers = [{\n  id: 1,\n  name: 'John Doe',\n  team: 'Executive',\n  location: 'New York',\n  jobRole: 'CEO',\n  imageUrl: '',\n  email: 'john.doe@company.com',\n  phone: '+1 (555) 000-0001',\n  linkedin: 'linkedin.com/in/johndoe',\n  directReports: [2, 3, 4]\n}, {\n  id: 2,\n  name: 'Sarah Williams',\n  team: 'Engineering',\n  location: 'San Francisco',\n  jobRole: 'CTO',\n  imageUrl: '',\n  email: 'sarah.williams@company.com',\n  phone: '+1 (555) 000-0002',\n  linkedin: 'linkedin.com/in/sarahwilliams',\n  managerId: 1,\n  directReports: [5, 6]\n}\n// Add more mock users here...\n];\nconst OrgChart = () => {\n  _s();\n  const theme = useTheme();\n\n  // Transform users data into the format required by Organization chart\n  const transformData = users => {\n    const buildNode = userId => {\n      var _user$directReports;\n      const user = users.find(u => u.id === userId);\n      const children = ((_user$directReports = user.directReports) === null || _user$directReports === void 0 ? void 0 : _user$directReports.map(reportId => buildNode(reportId))) || [];\n      return {\n        id: user.id.toString(),\n        value: {\n          name: user.name,\n          title: user.jobRole,\n          team: user.team,\n          email: user.email\n        },\n        children: children.length > 0 ? children : undefined\n      };\n    };\n    const rootUser = users.find(user => !user.managerId);\n    return rootUser ? buildNode(rootUser.id) : buildNode(users[0].id);\n  };\n  const config = {\n    data: transformData(mockUsers),\n    nodeCfg: {\n      style: {\n        fill: theme.palette.background.paper,\n        stroke: theme.palette.primary.main,\n        radius: 8\n      },\n      nodeStateStyles: {\n        hover: {\n          stroke: theme.palette.secondary.main,\n          lineWidth: 2\n        }\n      },\n      label: {\n        style: {\n          fill: theme.palette.text.primary,\n          fontSize: 14\n        }\n      }\n    },\n    markerCfg: {\n      symbol: 'circle',\n      style: {\n        fill: theme.palette.primary.main,\n        stroke: theme.palette.primary.main\n      }\n    },\n    layout: {\n      type: 'dendrogram',\n      direction: 'TB',\n      nodeSep: 50,\n      rankSep: 100\n    },\n    behaviors: ['drag-canvas', 'zoom-canvas', 'drag-node']\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      height: 'calc(100vh - 64px)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      sx: {\n        mb: 4\n      },\n      children: \"Organization Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        height: 'calc(100% - 80px)'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        sx: {\n          height: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Organization, {\n          ...config\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(OrgChart, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = OrgChart;\nexport default OrgChart;\nvar _c;\n$RefreshReg$(_c, \"OrgChart\");","map":{"version":3,"names":["React","Organization","Box","Typography","Card","CardContent","useTheme","jsxDEV","_jsxDEV","mockUsers","id","name","team","location","jobRole","imageUrl","email","phone","linkedin","directReports","managerId","OrgChart","_s","theme","transformData","users","buildNode","userId","_user$directReports","user","find","u","children","map","reportId","toString","value","title","length","undefined","rootUser","config","data","nodeCfg","style","fill","palette","background","paper","stroke","primary","main","radius","nodeStateStyles","hover","secondary","lineWidth","label","text","fontSize","markerCfg","symbol","layout","type","direction","nodeSep","rankSep","behaviors","sx","p","height","variant","mb","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/src/components/OrgChart.tsx"],"sourcesContent":["import React from 'react';\nimport { Organization } from '@ant-design/plots';\nimport {\n    Box,\n    Typography,\n    Card,\n    CardContent,\n    Avatar,\n    useTheme\n} from '@mui/material';\nimport { User } from '../types/User';\n\n// Mock data with hierarchy\nconst mockUsers: User[] = [\n    {\n        id: 1,\n        name: 'John Doe',\n        team: 'Executive',\n        location: 'New York',\n        jobRole: 'CEO',\n        imageUrl: '',\n        email: 'john.doe@company.com',\n        phone: '+1 (555) 000-0001',\n        linkedin: 'linkedin.com/in/johndoe',\n        directReports: [2, 3, 4]\n    },\n    {\n        id: 2,\n        name: 'Sarah Williams',\n        team: 'Engineering',\n        location: 'San Francisco',\n        jobRole: 'CTO',\n        imageUrl: '',\n        email: 'sarah.williams@company.com',\n        phone: '+1 (555) 000-0002',\n        linkedin: 'linkedin.com/in/sarahwilliams',\n        managerId: 1,\n        directReports: [5, 6]\n    },\n    // Add more mock users here...\n];\n\ninterface OrgChartNode {\n    id: string;\n    value: {\n        name: string;\n        title: string;\n        team: string;\n        email: string;\n    };\n    children?: OrgChartNode[];\n}\n\nconst OrgChart: React.FC = () => {\n    const theme = useTheme();\n\n    // Transform users data into the format required by Organization chart\n    const transformData = (users: User[]): OrgChartNode => {\n        const buildNode = (userId: number): OrgChartNode => {\n            const user = users.find(u => u.id === userId)!;\n            const children = user.directReports?.map(reportId => buildNode(reportId)) || [];\n\n            return {\n                id: user.id.toString(),\n                value: {\n                    name: user.name,\n                    title: user.jobRole,\n                    team: user.team,\n                    email: user.email\n                },\n                children: children.length > 0 ? children : undefined\n            };\n        };\n\n        const rootUser = users.find(user => !user.managerId);\n        return rootUser ? buildNode(rootUser.id) : buildNode(users[0].id);\n    };\n\n    const config = {\n        data: transformData(mockUsers),\n        nodeCfg: {\n            style: {\n                fill: theme.palette.background.paper,\n                stroke: theme.palette.primary.main,\n                radius: 8,\n            },\n            nodeStateStyles: {\n                hover: {\n                    stroke: theme.palette.secondary.main,\n                    lineWidth: 2,\n                },\n            },\n            label: {\n                style: {\n                    fill: theme.palette.text.primary,\n                    fontSize: 14,\n                },\n            },\n        },\n        markerCfg: {\n            symbol: 'circle',\n            style: {\n                fill: theme.palette.primary.main,\n                stroke: theme.palette.primary.main,\n            },\n        },\n        layout: {\n            type: 'dendrogram',\n            direction: 'TB',\n            nodeSep: 50,\n            rankSep: 100,\n        },\n        behaviors: ['drag-canvas', 'zoom-canvas', 'drag-node'],\n    };\n\n    return (\n        <Box sx={{ p: 3, height: 'calc(100vh - 64px)' }}>\n            <Typography variant=\"h4\" sx={{ mb: 4 }}>\n                Organization Chart\n            </Typography>\n            <Card sx={{ height: 'calc(100% - 80px)' }}>\n                <CardContent sx={{ height: '100%' }}>\n                    <Organization {...config} />\n                </CardContent>\n            </Card>\n        </Box>\n    );\n};\n\nexport default OrgChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}