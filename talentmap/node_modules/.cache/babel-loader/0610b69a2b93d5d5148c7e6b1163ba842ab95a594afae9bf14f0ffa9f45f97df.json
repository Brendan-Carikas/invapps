{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport G6 from '@antv/g6';\nimport { setItemState, paintOnce, getInOutPathEdges, clearActiveStates } from '../utils';\nimport { ITEM_STATE } from '../types';\nG6.registerBehavior('conv-hover', {\n  getDefaultCfg: function () {\n    return {\n      highlightData: {\n        nodes: [],\n        edges: [],\n        // 触发高亮的节点id\n        nodeId: null\n      }\n    };\n  },\n  getEvents: function () {\n    return {\n      'node:mouseenter': 'onNodeMouseEnter',\n      'node:mouseleave': 'onNodeMouseLeave',\n      'node:mousemove': 'onNodeMouseMove',\n      'edge:mouseenter': 'onEdgeMouseEnter',\n      'edge:mouseleave': 'onEdgeMouseLeave'\n    };\n  },\n  handleNodeNameTooltip: function (event) {\n    var shape = event.target;\n    // hover节点名称时emit事件，用于节点名称的tooltip的展示和隐藏\n    if (shape.get('name') === 'node-name') {\n      this.graph.emit('node:nametooltipshow', __assign(__assign({}, event), {\n        type: 'node:nametooltipshow',\n        name: 'node:nametooltipshow'\n      }));\n    } else {\n      this.graph.emit('node:nametooltiphide', __assign(__assign({}, event), {\n        type: 'node:nametooltiphide',\n        name: 'node:nametooltiphide'\n      }));\n    }\n  },\n  onNodeMouseEnter: function (event) {\n    this.handleNodeNameTooltip(event);\n    var currentNode = event.item;\n    var model = currentNode.getModel();\n    if (!currentNode || currentNode.destroyed || model.disabled) return;\n    var states = currentNode.getStates();\n    if (states.length) return;\n    if (!this.highlightData.nodeId) {\n      this.highlightData = {\n        nodes: this.graph.getNodes().map(function (node) {\n          return node.getModel();\n        }),\n        edges: this.graph.getEdges().map(function (edge) {\n          return edge.getModel();\n        })\n      };\n    }\n    // 高亮节点相关链路\n    this.highlightPath(currentNode, this.highlightData.edges);\n  },\n  onNodeMouseLeave: function (event) {\n    var _this = this;\n    // 清空所有元素的激活状态\n    paintOnce(this.graph, function () {\n      clearActiveStates(_this.graph);\n    });\n    this.highlightData = {\n      nodes: [],\n      edges: [],\n      nodeId: null\n    };\n  },\n  onNodeMouseMove: function (event) {\n    this.handleNodeNameTooltip(event);\n  },\n  onEdgeMouseEnter: function (event) {\n    var _this = this;\n    var currentEdge = event.item;\n    var model = currentEdge.getModel();\n    if (!currentEdge || currentEdge.destroyed || model.disabled) return;\n    var states = currentEdge.getStates();\n    if (states.length) return;\n    paintOnce(this.graph, function () {\n      setItemState(_this.graph, currentEdge, ITEM_STATE.Active, true);\n      // 提升边层级\n      currentEdge.toFront();\n    });\n  },\n  onEdgeMouseLeave: function (event) {\n    var edge = event.item;\n    setItemState(this.graph, edge, ITEM_STATE.Active, false);\n  },\n  // 高亮节点相关的链路\n  highlightPath: function (currentNode, queriedEdges) {\n    var _this = this;\n    if (queriedEdges === void 0) {\n      queriedEdges = [];\n    }\n    var currentNodeId = currentNode.getModel().id;\n    var _a = this.highlightData,\n      lastNodeId = _a.nodeId,\n      lastHighlightEdges = _a.edges;\n    // 要高亮节点与上一次高亮节点一样，同时相关路径也一样，则不再触发高亮操作\n    if (lastNodeId === currentNodeId && queriedEdges === lastHighlightEdges) {\n      return;\n    }\n    var _b = getInOutPathEdges(currentNodeId, queriedEdges),\n      relativeOutEdges = _b.relativeOutEdges,\n      relativeInEdges = _b.relativeInEdges;\n    var relativeNodeIds = new Set();\n    relativeOutEdges.forEach(function (edge) {\n      relativeNodeIds.add(edge.source);\n      relativeNodeIds.add(edge.target);\n    });\n    var relativeEdgeIds = relativeOutEdges.map(function (edge) {\n      return edge.id;\n    });\n    paintOnce(this.graph, function () {\n      relativeEdgeIds.forEach(function (edgeId) {\n        var edge = _this.graph.findById(edgeId);\n        setItemState(_this.graph, edge, ITEM_STATE.Active, true);\n        // 置顶\n        edge.toFront();\n      });\n      setItemState(_this.graph, currentNode, ITEM_STATE.Active, true);\n      // 提升节点层级\n      currentNode.toFront();\n    });\n    this.highlightData = {\n      nodeId: currentNodeId,\n      edges: relativeOutEdges,\n      nodes: relativeNodeIds\n    };\n  }\n});","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","G6","setItemState","paintOnce","getInOutPathEdges","clearActiveStates","ITEM_STATE","registerBehavior","getDefaultCfg","highlightData","nodes","edges","nodeId","getEvents","handleNodeNameTooltip","event","shape","target","get","graph","emit","type","name","onNodeMouseEnter","currentNode","item","model","getModel","destroyed","disabled","states","getStates","getNodes","map","node","getEdges","edge","highlightPath","onNodeMouseLeave","_this","onNodeMouseMove","onEdgeMouseEnter","currentEdge","Active","toFront","onEdgeMouseLeave","queriedEdges","currentNodeId","id","_a","lastNodeId","lastHighlightEdges","_b","relativeOutEdges","relativeInEdges","relativeNodeIds","Set","forEach","add","source","relativeEdgeIds","edgeId","findById"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@ant-design/graphs/es/components/conversion-dagre-graph/behaviors/custom-hover.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport G6 from '@antv/g6';\nimport { setItemState, paintOnce, getInOutPathEdges, clearActiveStates } from '../utils';\nimport { ITEM_STATE } from '../types';\nG6.registerBehavior('conv-hover', {\n    getDefaultCfg: function () {\n        return {\n            highlightData: {\n                nodes: [],\n                edges: [],\n                // 触发高亮的节点id\n                nodeId: null,\n            },\n        };\n    },\n    getEvents: function () {\n        return {\n            'node:mouseenter': 'onNodeMouseEnter',\n            'node:mouseleave': 'onNodeMouseLeave',\n            'node:mousemove': 'onNodeMouseMove',\n            'edge:mouseenter': 'onEdgeMouseEnter',\n            'edge:mouseleave': 'onEdgeMouseLeave',\n        };\n    },\n    handleNodeNameTooltip: function (event) {\n        var shape = event.target;\n        // hover节点名称时emit事件，用于节点名称的tooltip的展示和隐藏\n        if (shape.get('name') === 'node-name') {\n            this.graph.emit('node:nametooltipshow', __assign(__assign({}, event), { type: 'node:nametooltipshow', name: 'node:nametooltipshow' }));\n        }\n        else {\n            this.graph.emit('node:nametooltiphide', __assign(__assign({}, event), { type: 'node:nametooltiphide', name: 'node:nametooltiphide' }));\n        }\n    },\n    onNodeMouseEnter: function (event) {\n        this.handleNodeNameTooltip(event);\n        var currentNode = event.item;\n        var model = currentNode.getModel();\n        if (!currentNode || currentNode.destroyed || model.disabled)\n            return;\n        var states = currentNode.getStates();\n        if (states.length)\n            return;\n        if (!this.highlightData.nodeId) {\n            this.highlightData = {\n                nodes: this.graph.getNodes().map(function (node) { return node.getModel(); }),\n                edges: this.graph.getEdges().map(function (edge) { return edge.getModel(); }),\n            };\n        }\n        // 高亮节点相关链路\n        this.highlightPath(currentNode, this.highlightData.edges);\n    },\n    onNodeMouseLeave: function (event) {\n        var _this = this;\n        // 清空所有元素的激活状态\n        paintOnce(this.graph, function () {\n            clearActiveStates(_this.graph);\n        });\n        this.highlightData = {\n            nodes: [],\n            edges: [],\n            nodeId: null,\n        };\n    },\n    onNodeMouseMove: function (event) {\n        this.handleNodeNameTooltip(event);\n    },\n    onEdgeMouseEnter: function (event) {\n        var _this = this;\n        var currentEdge = event.item;\n        var model = currentEdge.getModel();\n        if (!currentEdge || currentEdge.destroyed || model.disabled)\n            return;\n        var states = currentEdge.getStates();\n        if (states.length)\n            return;\n        paintOnce(this.graph, function () {\n            setItemState(_this.graph, currentEdge, ITEM_STATE.Active, true);\n            // 提升边层级\n            currentEdge.toFront();\n        });\n    },\n    onEdgeMouseLeave: function (event) {\n        var edge = event.item;\n        setItemState(this.graph, edge, ITEM_STATE.Active, false);\n    },\n    // 高亮节点相关的链路\n    highlightPath: function (currentNode, queriedEdges) {\n        var _this = this;\n        if (queriedEdges === void 0) { queriedEdges = []; }\n        var currentNodeId = currentNode.getModel().id;\n        var _a = this.highlightData, lastNodeId = _a.nodeId, lastHighlightEdges = _a.edges;\n        // 要高亮节点与上一次高亮节点一样，同时相关路径也一样，则不再触发高亮操作\n        if (lastNodeId === currentNodeId && queriedEdges === lastHighlightEdges) {\n            return;\n        }\n        var _b = getInOutPathEdges(currentNodeId, queriedEdges), relativeOutEdges = _b.relativeOutEdges, relativeInEdges = _b.relativeInEdges;\n        var relativeNodeIds = new Set();\n        relativeOutEdges.forEach(function (edge) {\n            relativeNodeIds.add(edge.source);\n            relativeNodeIds.add(edge.target);\n        });\n        var relativeEdgeIds = relativeOutEdges.map(function (edge) { return edge.id; });\n        paintOnce(this.graph, function () {\n            relativeEdgeIds.forEach(function (edgeId) {\n                var edge = _this.graph.findById(edgeId);\n                setItemState(_this.graph, edge, ITEM_STATE.Active, true);\n                // 置顶\n                edge.toFront();\n            });\n            setItemState(_this.graph, currentNode, ITEM_STATE.Active, true);\n            // 提升节点层级\n            currentNode.toFront();\n        });\n        this.highlightData = {\n            nodeId: currentNodeId,\n            edges: relativeOutEdges,\n            nodes: relativeNodeIds,\n        };\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}