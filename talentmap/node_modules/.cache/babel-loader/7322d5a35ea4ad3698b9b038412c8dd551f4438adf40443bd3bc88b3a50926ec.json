{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * 按照数据中的结果设置fixorder\n */\nvar initDataOrder = function (g, nodeOrder) {\n  var simpleNodes = g.nodes().filter(function (v) {\n    var _a;\n    return !((_a = g.children(v)) === null || _a === void 0 ? void 0 : _a.length);\n  });\n  var ranks = simpleNodes.map(function (v) {\n    return g.node(v).rank;\n  });\n  var maxRank = Math.max.apply(Math, ranks);\n  var layers = [];\n  for (var i = 0; i < maxRank + 1; i++) {\n    layers[i] = [];\n  }\n  nodeOrder === null || nodeOrder === void 0 ? void 0 : nodeOrder.forEach(function (n) {\n    var node = g.node(n);\n    // 只考虑原有节点，dummy节点需要按照后续算法排出\n    if (!node || (node === null || node === void 0 ? void 0 : node.dummy)) {\n      return;\n    }\n    if (!isNaN(node.rank)) {\n      node.fixorder = layers[node.rank].length; // 设置fixorder为当层的顺序\n      layers[node.rank].push(n);\n    }\n  });\n};\nexports.default = initDataOrder;","map":{"version":3,"names":["initDataOrder","g","nodeOrder","simpleNodes","nodes","filter","v","_a","children","length","ranks","map","node","rank","maxRank","Math","max","apply","layers","i","forEach","n","dummy","isNaN","fixorder","push","exports","default"],"sources":["/Users/invotradesign/CascadeProjects/site-users-app/node_modules/@antv/g6-pc/node_modules/@antv/layout/src/layout/dagre/src/order/init-data-order.ts"],"sourcesContent":["import { Graph } from \"../../graph\";\n\n/**\n * 按照数据中的结果设置fixorder\n */\nconst initDataOrder = (g: Graph, nodeOrder: string[]) => {\n  const simpleNodes = g.nodes().filter((v) => {\n    return !g.children(v)?.length;\n  });\n  const ranks = simpleNodes.map((v) => g.node(v)!.rank as number);\n  const maxRank = Math.max(...ranks);\n  const layers: string[][] = [];\n  for (let i = 0; i < maxRank + 1; i++) {\n    layers[i] = [];\n  }\n\n  nodeOrder?.forEach((n) => {\n    const node = g.node(n);\n    // 只考虑原有节点，dummy节点需要按照后续算法排出\n    if (!node || node?.dummy) {\n      return;\n    }\n    if (!isNaN(node.rank as number)) {\n      node.fixorder = layers[node.rank as number].length; // 设置fixorder为当层的顺序\n      layers[node.rank as number].push(n);\n    }\n  });\n};\n\nexport default initDataOrder;\n"],"mappings":";;;;;AAEA;;;AAGA,IAAMA,aAAa,GAAG,SAAAA,CAACC,CAAQ,EAAEC,SAAmB;EAClD,IAAMC,WAAW,GAAGF,CAAC,CAACG,KAAK,EAAE,CAACC,MAAM,CAAC,UAACC,CAAC;;IACrC,OAAO,EAAC,CAAAC,EAAA,GAAAN,CAAC,CAACO,QAAQ,CAACF,CAAC,CAAC,cAAAC,EAAA,uBAAAA,EAAA,CAAEE,MAAM;EAC/B,CAAC,CAAC;EACF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,GAAG,CAAC,UAACL,CAAC;IAAK,OAAAL,CAAC,CAACW,IAAI,CAACN,CAAC,CAAE,CAACO,IAAc;EAAzB,CAAyB,CAAC;EAC/D,IAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAAC,KAAA,CAARF,IAAI,EAAQL,KAAK,CAAC;EAClC,IAAMQ,MAAM,GAAe,EAAE;EAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,GAAG,CAAC,EAAEK,CAAC,EAAE,EAAE;IACpCD,MAAM,CAACC,CAAC,CAAC,GAAG,EAAE;;EAGhBjB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEkB,OAAO,CAAC,UAACC,CAAC;IACnB,IAAMT,IAAI,GAAGX,CAAC,CAACW,IAAI,CAACS,CAAC,CAAC;IACtB;IACA,IAAI,CAACT,IAAI,KAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,KAAK,GAAE;MACxB;;IAEF,IAAI,CAACC,KAAK,CAACX,IAAI,CAACC,IAAc,CAAC,EAAE;MAC/BD,IAAI,CAACY,QAAQ,GAAGN,MAAM,CAACN,IAAI,CAACC,IAAc,CAAC,CAACJ,MAAM,CAAC,CAAC;MACpDS,MAAM,CAACN,IAAI,CAACC,IAAc,CAAC,CAACY,IAAI,CAACJ,CAAC,CAAC;;EAEvC,CAAC,CAAC;AACJ,CAAC;AAEDK,OAAA,CAAAC,OAAA,GAAe3B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}